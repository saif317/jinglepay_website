---
import QRModal from '@components/common/QRModal.astro';
import Footer from '@components/Footer.astro';
import Header from '@components/Header.astro';

import '@styles/global.css';
import 'swiper/css';

// import * as Swiper from 'swiper';

const { translations, lang } = Astro.locals;
const metaData = {
  title: translations.title,
  description: translations.description,
};

// Determine font family based on language
const fontFamily = lang === 'en' ? "'Hero New', sans-serif" : "'Bai Jamjuree', sans-serif";
---

<!doctype html>
<html lang={lang} dir={lang === 'ur' || lang === 'ar' ? 'rtl' : 'ltr'} class='scroll-smooth'>
  <head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <link rel='icon' type='image/x-icon' href='/favicon.ico' sizes='16x16 32x32' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' sizes='any' />
    <link rel='apple-touch-icon' href='/favicon.png' />
    <meta name='generator' content={Astro.generator} />
    <meta name='description' content={metaData.description} />
    <meta name='theme-color' content='#794eff' />
    <link rel='manifest' href='/site.webmanifest' />
    <title>{metaData.title}</title>

    <!-- Google Fonts -->
    <link rel='preconnect' href='https://fonts.googleapis.com' />
    <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
    <link
      href='https://fonts.googleapis.com/css2?family=Bai+Jamjuree:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;1,200;1,300;1,400;1,500;1,600;1,700&family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&display=swap'
      rel='stylesheet'
    />
    <link
      href='https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap'
      rel='stylesheet'
    />

    <link rel='sitemap' href='/sitemap-index.xml' />
  </head>
  <body style={lang === 'ur' || lang === 'ar' ? 'direction: rtl' : 'direction: ltr'}>
    <Header />
    <main>
      <slot />
    </main>
    <Footer />
    <QRModal />
  </body>

  <script src='/scripts/freshchat-ae.min.js' type='text/javascript'></script>
</html>

<style is:global define:vars={{ fontFamily }}>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
    font-family: var(--fontFamily);
    background-color: var(--white);
  }

  /*
  Styles for Freshchat Widget (div#fc_frame and iframe#fc_widget).
  The goal is to use your preferred styles when the chat is OPEN,
  but ensure it doesn't block page content when CLOSED (minimized to launcher).

  This is achieved by scoping the "open" styles to div#fc_frame only when it has
  a specific class indicating the chat is open. We use '.fc-widget-is-open' as a PLACEHOLDER.

  !!! CRITICAL ACTION FOR YOU !!!
  You MUST find the actual CSS class Freshchat adds to the <div id="fc_frame"> element
  when the chat window is open. Then, replace ALL instances of '.fc-widget-is-open'
  in the CSS below with that actual class name.
  To find it: Inspect div#fc_frame in your browser's developer tools, first when the chat is
  closed (it might have 'fc-widget-small'), then open the chat and see what class is added
  (e.g., 'fc-widget-open', 'fc-chat-open', 'fc-expanded', 'open', etc.).
*/

  /* Mobile: Full screen style, applied ONLY when chat is OPEN */
  @media (max-width: 768px) {
    /* !!! IMPORTANT: Ensure '.fc-widget-is-open' is replaced with Freshchat's actual 'open' class !!! */
    /* div#fc_frame is positioned 50px from the top, filling the rest of the screen */
    div#fc_frame.fc-widget-is-open {
      position: fixed !important;
      top: 50px !important; /* Gap at the top */
      left: 0 !important;
      right: 0 !important; /* Spans full width */
      bottom: 0 !important; /* Goes to the bottom of the screen */
      /* height is implicitly calc(100vh - 50px) */

      background-color: transparent !important; /* Ensure container is transparent so page behind shows in the gap */
      padding: 0 !important;
      margin: 0 !important;
      border: none !important;
      z-index: 2147483001 !important;
      display: block !important;
      overflow: hidden !important; /* To prevent scrollbars on the container itself */
    }

    /* iframe#fc_widget (Freshchat UI) fills its container div#fc_frame */
    div#fc_frame.fc-widget-is-open iframe#fc_widget {
      width: 100% !important;
      height: 97% !important;
      display: block !important;
      border: none !important;
    }

    div#fc_frame.fc-mobile-view.h-open-container {
      height: 98% !important;
    }
  }

  /* Desktop: Your original 50% width, 70% height style, applied ONLY when chat is OPEN */
  @media (min-width: 769px) {
    /* Replace '.fc-widget-is-open' with the actual open class! */
    div#fc_frame.fc-widget-is-open {
      position: fixed !important;
      width: 50% !important; /* Your original preference */
      height: 70% !important; /* Your original preference */
      /* max-width: 100% !important; /* From your original, often redundant if width is fixed % */
      /* max-height: 100vh !important; /* From your original, often redundant if height is fixed % */
      top: auto !important; /* Allows bottom/right positioning */
      left: auto !important; /* Allows bottom/right positioning */
      right: 1rem !important; /* Your original preference */
      bottom: 1rem !important; /* Your original preference */
      border-radius: 0 !important; /* Your original preference */
      box-shadow: none !important; /* Your original preference */
      border: none !important; /* Your original preference */
      z-index: 2147483001 !important;
      margin: 0 !important;
      padding: 0 !important;
      display: block !important;
      /* overflow: hidden; /* Consider adding if content ever overflows rounded corners, though radius is 0 here */
    }

    /* Make the iframe fill the container when chat is OPEN on desktop */
    div#fc_frame.fc-widget-is-open iframe#fc_widget {
      width: 100% !important;
      height: 97% !important;
      display: block !important;
      /* border-radius: inherit !important; /* Only if parent div#fc_frame had a radius */
    }
  }

  /*
  When div#fc_frame does NOT have the '.fc-widget-is-open' class (i.e., chat is closed),
  the styles above will not apply. This should allow Freshchat's default styles for the
  launcher icon (e.g., via the 'fc-widget-small' class and its inline styles like
  'bottom: 15px; right: 15px;') to take effect without being overridden to be huge.

  If, after replacing '.fc-widget-is-open' with the correct class, the launcher icon itself
  (when chat is closed) is still causing issues or is not visible, you might need to add
  specific, minimal styles for 'div#fc_frame.fc-widget-small' or 'div#fc_frame:not(.THE_ACTUAL_OPEN_CLASS)'
  to ensure it's small and positioned correctly, e.g.:

  div#fc_frame.fc-widget-small {
    width: 60px !important; // Or Freshchat's default launcher width
    height: 60px !important; // Or Freshchat's default launcher height
    // Ensure other properties like top, left are not making it cover the screen
  }
  div#fc_frame.fc-widget-small iframe#fc_widget {
     display: none !important; // If the iframe content should be hidden for the launcher state
  }
*/
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Handle smooth scrolling for anchor links
    const anchors = document.querySelectorAll('a[href^="#"], a[href*="#"]');
    
    // Function to check if the current page is the terms-and-conditions page
    const isTermsAndConditionsPage = () => {
      const path = window.location.pathname;
      return path.includes('terms-and-conditions');
    };
    
    // Function to check if the current page is any homepage variant
    const isCurrentPageHomepage = () => {
      const path = window.location.pathname;
      // Root homepage
      if (path === '/' || path.endsWith('/index.html')) {
        return true;
      }

      // Country/language specific homepages (like /pak/en/ or /pak/)
      const segments = path.split('/').filter(Boolean);
      if (segments.length <= 2 && path.endsWith('/')) {
        return true;
      }

      return false;
    };

    // Check if we're on the homepage or a different page
    const isHomepage = isCurrentPageHomepage();
    const isTermsPage = isTermsAndConditionsPage();

    anchors.forEach((anchor) => {
      anchor.addEventListener('click', (e: Event) => {
        e.preventDefault();

        const hrefValue = (e.currentTarget as HTMLAnchorElement).getAttribute('href') || '';

        // Special case for terms-and-conditions page - don't navigate, just scroll
        if (isTermsPage && hrefValue.startsWith('#')) {
          const targetElement = document.querySelector(hrefValue);
          if (targetElement) {
            // Update URL without triggering navigation
            history.pushState({}, '', window.location.pathname + hrefValue);
            
            // Scroll with offset for header
            window.scrollTo({
              top: targetElement.getBoundingClientRect().top + window.scrollY - 120,
              behavior: 'smooth',
            });
            return;
          }
        }
        
        // Case 1: Link to a different page with an anchor (e.g., /company#mission)
        if (hrefValue.includes('/') && hrefValue.includes('#')) {
          // This is a link to another page with an anchor
          window.location.href = hrefValue;
          return;
        }

        // Case 2: Simple anchor link starting with # (e.g., #benefits-section)
        if (hrefValue.startsWith('#')) {
          // If not on homepage, navigate to homepage with the anchor
          if (!isHomepage) {
            // Preserve full path structure (both country and language)
            const pathSegments = window.location.pathname.split('/').filter(Boolean);
            let basePath = '';

            // Build the base path correctly preserving country and language parts
            if (pathSegments.length >= 1) {
              // Get country segment
              basePath = `/${pathSegments[0]}`;

              // If there's a language segment, include it too
              if (pathSegments.length >= 2) {
                basePath += `/${pathSegments[1]}`;
              }
            }

            // Navigate to the proper path + anchor
            window.location.href = `${basePath}/${hrefValue}`;
            return;
          }

          // On homepage, just scroll to the element
          const targetElement = document.querySelector(hrefValue);
          if (targetElement) {
            window.scrollTo({
              top: targetElement.getBoundingClientRect().top + window.scrollY - 120,
              behavior: 'smooth',
            });
          }
        }
      });
    });

    // Save country and language preferences from URL
    const saveBrowsingPreferences = () => {
      const pathSegments = window.location.pathname.split('/').filter(Boolean);

      // Check if we have both country and language segments in the URL
      if (pathSegments.length >= 2) {
        const language = pathSegments[1];

        // Save to localStorage
        localStorage.setItem('preferred_language', language);
      }
    };

    // Call immediately to save current page's preferences
    saveBrowsingPreferences();

    // Handle scrolling to anchors on page load if hash exists in URL
    const handleHashOnLoad = () => {
      const hash = window.location.hash;

      if (hash) {
        // Small delay to ensure the page is fully loaded
        setTimeout(() => {
          const targetElement = document.querySelector(hash);

          if (targetElement) {
            window.scrollTo({
              top: targetElement.getBoundingClientRect().top + window.scrollY - 120,
              behavior: 'smooth',
            });
          }
        }, 100);
      }
    };

    // Call to handle initial hash in URL
    handleHashOnLoad();
  });
</script>
