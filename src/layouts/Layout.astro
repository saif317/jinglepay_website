---
import QRModal from '@components/common/QRModal.astro';
import Footer from '@components/Footer.astro';
import Header from '@components/Header.astro';

import '@styles/global.css';
import 'swiper/css';

// import * as Swiper from 'swiper';

const { translations, lang } = Astro.locals;
const metaData = {
  title: translations.title,
  description: translations.description,
};

// Determine font family based on language
const fontFamily =
  lang === 'en' ? "'Hero New', sans-serif" : "'Jameel Noori Nastaleeq Kasheeda', 'Hero New', sans-serif";
---

<!doctype html>
<html lang={lang} dir={lang === 'ur' || lang === 'ar' ? 'rtl' : 'ltr'} class='scroll-smooth'>
  <head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <link rel='icon' type='image/x-icon' href='/favicon.ico' sizes='16x16 32x32' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' sizes='any' />
    <link rel='apple-touch-icon' href='/favicon.png' />
    <meta name='generator' content={Astro.generator} />
    <meta name='description' content={metaData.description} />
    <meta name='theme-color' content='#794eff' />
    <link rel='manifest' href='/site.webmanifest' />
    <title>{metaData.title}</title>

    <!-- Google Fonts -->
    <link rel='preconnect' href='https://fonts.googleapis.com' />
    <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />

    <link rel='sitemap' href='/sitemap-index.xml' />
  </head>
  <body style={lang === 'ur' || lang === 'ar' ? 'direction: rtl' : 'direction: ltr'}>
    <Header />
    <main>
      <slot />
    </main>
    <Footer />
    <QRModal />
  </body>

  <script src='/scripts/freshchat-ae.min.js' type='text/javascript'></script>
</html>

<style is:global define:vars={{ fontFamily }}>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
    font-family: var(--fontFamily);
    background-color: var(--white);
  }

  .fc-widget-small {
    bottom: 0 !important;
    top: 40% !important;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Handle smooth scrolling for anchor links
    const anchors = document.querySelectorAll('a[href^="#"], a[href*="#"]');

    // Function to check if the current page is any homepage variant
    const isCurrentPageHomepage = () => {
      const path = window.location.pathname;
      // Root homepage
      if (path === '/' || path.endsWith('/index.html')) {
        return true;
      }

      // Country/language specific homepages (like /pak/en/ or /pak/)
      const segments = path.split('/').filter(Boolean);
      if (segments.length <= 2 && path.endsWith('/')) {
        return true;
      }

      return false;
    };

    // Check if we're on the homepage or a different page
    const isHomepage = isCurrentPageHomepage();

    anchors.forEach((anchor) => {
      anchor.addEventListener('click', (e: Event) => {
        e.preventDefault();

        const hrefValue = (e.currentTarget as HTMLAnchorElement).getAttribute('href') || '';

        // Case 1: Link to a different page with an anchor (e.g., /company#mission)
        if (hrefValue.includes('/') && hrefValue.includes('#')) {
          // This is a link to another page with an anchor
          window.location.href = hrefValue;
          return;
        }

        // Case 2: Simple anchor link starting with # (e.g., #benefits-section)
        if (hrefValue.startsWith('#')) {
          // If not on homepage, navigate to homepage with the anchor
          if (!isHomepage) {
            // Preserve full path structure (both country and language)
            const pathSegments = window.location.pathname.split('/').filter(Boolean);
            let basePath = '';

            // Build the base path correctly preserving country and language parts
            if (pathSegments.length >= 1) {
              // Get country segment
              basePath = `/${pathSegments[0]}`;

              // If there's a language segment, include it too
              if (pathSegments.length >= 2) {
                basePath += `/${pathSegments[1]}`;
              }
            }

            // Navigate to the proper path + anchor
            window.location.href = `${basePath}/${hrefValue}`;
            return;
          }

          // On homepage, just scroll to the element
          const targetElement = document.querySelector(hrefValue);
          if (targetElement) {
            window.scrollTo({
              top: targetElement.getBoundingClientRect().top + window.scrollY - 120,
              behavior: 'smooth',
            });
          }
        }
      });
    });

    // Save country and language preferences from URL
    const saveBrowsingPreferences = () => {
      const pathSegments = window.location.pathname.split('/').filter(Boolean);

      // Check if we have both country and language segments in the URL
      if (pathSegments.length >= 2) {
        const language = pathSegments[1];

        // Save to localStorage
        localStorage.setItem('preferred_language', language);
      }
    };

    // Call immediately to save current page's preferences
    saveBrowsingPreferences();

    // Handle scrolling to anchors on page load if hash exists in URL
    const handleHashOnLoad = () => {
      const hash = window.location.hash;

      if (hash) {
        // Small delay to ensure the page is fully loaded
        setTimeout(() => {
          const targetElement = document.querySelector(hash);

          if (targetElement) {
            window.scrollTo({
              top: targetElement.getBoundingClientRect().top + window.scrollY - 120,
              behavior: 'smooth',
            });
          }
        }, 100);
      }
    };

    // Call to handle initial hash in URL
    handleHashOnLoad();
  });
</script>
