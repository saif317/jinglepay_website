---
import { COUNTRIES } from '@constants';
import { Image } from 'astro:assets';

const { lang, country } = Astro.locals;
const { pathname } = Astro.url;

const { className } = Astro.props;

const currentCountry = COUNTRIES.find((c) => c.path === country) || COUNTRIES[0];
const currentLanguage = currentCountry.languages.find((l) => l.code === lang) || currentCountry.languages[0];

const getCountryLink = (newCountryPath: string) => {
  if (newCountryPath === country) return '#';
  else if (newCountryPath === 'uae') return 'https://jinglepay.com/homepage/AE/';
  else return '/' + [newCountryPath, lang, pathname.split('/').slice(3).join('/')].join('/');
};

const getLanguageLink = (newLangCode: string) => {
  return '/' + [country, newLangCode, pathname.split('/').slice(3).join('/')].join('/');
};
---

<div
  class={`items-center bg-gray-100 px-2.5 py-2 gap-x-2.5 rounded-[12px] min-w-[154px] country-language-selector ${className}`}
>
  <div class='relative country-selector'>
    <button id='country-button' class='flex items-center cursor-pointer'>
      <div class='flex justify-center items-center flag'>
        {currentCountry.flag && <currentCountry.flag class='' />}
      </div>
      <span class='font-medium text-gray-500'>{currentCountry.code}</span>
    </button>
    <div
      id='country-dropdown'
      class='hidden absolute left-0 z-20 mt-2 min-w-[150px] bg-white rounded-lg border border-gray-200 shadow-xl p-1.5 origin-top-left focus:outline-none transform transition-all duration-200'
    >
      <div class='py-1' role='menu' aria-orientation='vertical' aria-labelledby='country-button'>
        {
          COUNTRIES.map((country) => (
            <a
              href={getCountryLink(country.path)}
              class='flex gap-3 items-center px-3 py-2 text-sm font-medium text-gray-700 rounded-md transition-all duration-200 ease-in-out hover:bg-blue-50 hover:text-blue-600'
              role='menuitem'
            >
              {country.flag && (
                <div class='flex overflow-hidden justify-center items-center w-6 h-6 rounded-sm'>
                  <country.flag class='object-cover w-full h-full' />
                </div>
              )}
              <span>{country.code}</span>
            </a>
          ))
        }
      </div>
    </div>
  </div>
  <div class='w-px h-6 bg-gray-300 divider'></div>
  <div class='relative language-selector'>
    <button id='language-button' class='flex items-center font-medium text-gray-500 cursor-pointer language-button'>
      <span>{currentCountry.languages.filter((lang) => lang.code !== currentLanguage.code)[0].name}</span>
    </button>
    <div
      id='language-dropdown'
      class='hidden absolute right-0 z-20 p-1.5 mt-2 min-w-[140px] bg-white rounded-lg border border-gray-200 shadow-xl origin-top-right focus:outline-none transform transition-all duration-200'
    >
      <div class='py-1' role='menu' aria-orientation='vertical' aria-labelledby='language-button'>
        {
          currentCountry.languages.map((language) => (
            <a
              href={getLanguageLink(language.code)}
              class='block px-3 py-2 text-sm font-medium text-gray-700 rounded-md transition-all duration-200 ease-in-out hover:bg-blue-50 hover:text-blue-600'
              role='menuitem'
              tabindex='-1'
              id={`menu-item-${language.code}`}
            >
              {language.name}
            </a>
          ))
        }
      </div>
    </div>
  </div>
</div>

<style>
  .country-language-selector {
    /* display: inline-flex; */
    position: relative;
  }

  .flag {
    margin-right: 0.5rem; /* Keep original flag margin from button */
  }

  .divider {
    margin: 0 0.5rem;
  }

  /* Subtle bounce animation on dropdown open */
  #country-dropdown:not(.hidden),
  #language-dropdown:not(.hidden) {
    animation: dropdown-open 0.2s ease-out forwards;
  }

  @keyframes dropdown-open {
    0% {
      opacity: 0;
      transform: translateY(-5px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 640px) {
    .country-language-selector {
      min-width: 130px;
    }
  }
</style>

<script>
  // Function to initialize all dropdowns
  function initializeDropdowns() {
    // Select all dropdown buttons and containers
    const countryButtons = document.querySelectorAll('[id="country-button"]');
    const countryDropdowns = document.querySelectorAll('[id="country-dropdown"]');
    const languageButtons = document.querySelectorAll('[id="language-button"]');
    const languageDropdowns = document.querySelectorAll('[id="language-dropdown"]');

    // Function to toggle country dropdown
    function toggleCountryDropdown(e: Event) {
      e.stopPropagation();
      e.preventDefault();

      // Get the closest dropdown to this button
      // @ts-ignore
      const dropdown = e.currentTarget.closest('.country-selector').querySelector('#country-dropdown');

      // Toggle this dropdown
      dropdown?.classList.toggle('hidden');

      // Hide all language dropdowns
      languageDropdowns.forEach((el) => el.classList.add('hidden'));
    }

    // Function to toggle language dropdown
    function toggleLanguageDropdown(e: Event) {
      e.stopPropagation();
      e.preventDefault();

      // Get the closest dropdown to this button
      // @ts-ignore
      const dropdown = e.currentTarget.closest('.language-selector').querySelector('#language-dropdown');

      // Toggle this dropdown
      dropdown?.classList.toggle('hidden');

      // Hide all country dropdowns
      countryDropdowns.forEach((el) => el.classList.add('hidden'));
    }

    // Add events to all country buttons
    countryButtons.forEach((button) => {
      button.addEventListener('click', toggleCountryDropdown);
      button.addEventListener('touchend', toggleCountryDropdown);
    });

    // Add events to all language buttons
    languageButtons.forEach((button) => {
      button.addEventListener('click', toggleLanguageDropdown);
      button.addEventListener('touchend', toggleLanguageDropdown);
    });
  }

  // Initialize dropdowns on page load
  document.addEventListener('DOMContentLoaded', initializeDropdowns);

  // Close all dropdowns when clicking outside
  document.addEventListener('click', () => {
    const countryDropdowns = document.querySelectorAll('[id="country-dropdown"]');
    const languageDropdowns = document.querySelectorAll('[id="language-dropdown"]');

    countryDropdowns.forEach((el) => el.classList.add('hidden'));
    languageDropdowns.forEach((el) => el.classList.add('hidden'));
  });

  document.addEventListener('touchend', (e) => {
    // Type assertion to tell TypeScript that target is an Element
    const target = e.target as Element;

    if (!target.closest('.country-language-selector')) {
      const countryDropdowns = document.querySelectorAll('[id="country-dropdown"]');
      const languageDropdowns = document.querySelectorAll('[id="language-dropdown"]');

      countryDropdowns.forEach((el) => el.classList.add('hidden'));
      languageDropdowns.forEach((el) => el.classList.add('hidden'));
    }
  });
</script>
