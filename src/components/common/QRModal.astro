---
// Import any needed dependencies
import PhoneNumberInput from '@components/common/PhoneNumberInput.astro';
import { Image } from 'astro:assets';

// Add this type declaration
declare global {
  interface Window {
    openQRModal: () => void;
  }
}

// Props for customization
interface Props {
  qrCodeSrc: ImageMetadata;
  isOpen: boolean;
}

const { qrCodeSrc, isOpen = false } = Astro.props;
---

<button id='qr-button' type='button' class='cursor-pointer'>
  <slot />
</button>

<!-- Modal backdrop -->
<div
  id='qr-modal-backdrop'
  class={`fixed inset-0 z-50 flex items-center justify-center bg-[#00000050] ${isOpen ? '' : 'hidden'}`}
>
  <!-- Modal content -->
  <div
    class='w-full max-w-3xl text-center py-16 flex flex-col items-center relative bg-white rounded-[60px] shadow-xl text-zinc-800 gap-y-11'
  >
    <!-- <button id='close-modal' class='absolute text-gray-500 top-12 right-12 hover:text-gray-700'>
      <svg xmlns='http://www.w3.org/2000/svg' class='w-6 h-6' fill='none' viewBox='0 0 24 24' stroke='currentColor'>
        <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M6 18L18 6M6 6l12 12'></path>
      </svg>
    </button> -->

    <h3 class='flex items-center justify-between text-5xl font-extrabold'>Get the Jingle Pay App</h3>
    <span class='text-3xl font-light'>Scan the QR code to download the App</span>

    <div class='flex justify-center mb-4'>
      <Image src={qrCodeSrc} alt='Download Jingle Pay App' width={200} height={200} />
    </div>

    <span class='text-3xl font-light'>or get a download link via SMS</span>
    <PhoneNumberInput class='mx-auto my-4' />
  </div>
</div>
<script>
  // Only run this script on the client
  const qrButton = document.getElementById('qr-button');
  const modalBackdrop = document.getElementById('qr-modal-backdrop');
  const closeButton = document.getElementById('close-modal');

  // Open modal when QR button is clicked
  qrButton?.addEventListener('click', () => {
    modalBackdrop?.classList.remove('hidden');
    document.body.classList.add('overflow-hidden'); // Prevent scrolling
  });

  // Close modal when close button is clicked
  closeButton?.addEventListener('click', (e) => {
    e.preventDefault();
    modalBackdrop?.classList.add('hidden');
    document.body.classList.remove('overflow-hidden');
  });

  // Close modal when clicking outside modal content
  modalBackdrop?.addEventListener('click', (e) => {
    if (e.target === modalBackdrop) {
      modalBackdrop.classList.add('hidden');
      document.body.classList.remove('overflow-hidden');
    }
  });

  // Close modal on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modalBackdrop && !modalBackdrop.classList.contains('hidden')) {
      modalBackdrop.classList.add('hidden');
      document.body.classList.remove('overflow-hidden');
    }
  });
</script>
