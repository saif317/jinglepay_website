---
import PakFlag from '@assets/flags/pak.svg';
import UaeFlag from '@assets/flags/uae.svg';

interface Props {
  onSubmit?: string;
  class?: string;
  smsText?: string;
}

const {
  translations: { qrModal = {} },
} = Astro.locals;

const { onSubmit = '#', class: className = '', smsText = qrModal.smsText } = Astro.props;

const countryParam = Astro.params.country?.toUpperCase() || 'ARE';

type CountryDetails = {
  prefix: string;
  regex: RegExp;
  placeholder: string;
  flag: AstroSVGElement;
};

const countryDetails: Record<string, CountryDetails> = {
  PAK: { prefix: '+92', regex: /^3\d{9}$/, placeholder: '300 1234567', flag: PakFlag },
  ARE: { prefix: '+971', regex: /^\d{9}$/, placeholder: '50 123 4567', flag: UaeFlag },
};

const currentCountry = countryDetails[countryParam] || countryDetails['ARE'];
---

<div class={`flex w-full max-w-xs rounded-md overflow-hidden shadow-md ${className}`}>
  <div class='flex gap-x-1 items-center px-2 py-1.5 bg-gray-100 border-r border-gray-200 sm:gap-x-1.5 sm:px-3'>
    {currentCountry.flag && <currentCountry.flag class='w-4 h-auto rounded-sm' />}
    <span id='phone-prefix' class='text-sm font-medium sm:text-base'>{currentCountry.prefix}</span>
  </div>

  <input
    type='tel'
    name='phoneNumber'
    placeholder={currentCountry.placeholder}
    class='flex-1 px-2 py-1.5 min-w-0 text-sm border-none outline-none sm:px-3 sm:text-base'
    maxlength='10'
    required
    id='phone-input'
  />

  <button
    id='send-link-button'
    type='button'
    class='cursor-pointer bg-[#794eff] px-3 sm:px-4 py-1.5 text-white flex items-center justify-center hover:bg-[#6a3ffb] transition-colors duration-200'
    aria-label='Send download link'
  >
    <svg
      xmlns='http://www.w3.org/2000/svg'
      class='w-4 h-4 sm:w-5 sm:h-5 rtl:rotate-180'
      fill='none'
      viewBox='0 0 24 24'
      stroke='currentColor'
    >
      <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M14 5l7 7m0 0l-7 7m7-7H3'></path>
    </svg>
  </button>
</div>

<div
  id='toast'
  class='fixed z-50 hidden w-11/12 p-3 transition-all duration-300 transform -translate-x-1/2 translate-y-full bg-white rounded-md shadow-lg opacity-0 bottom-4 left-1/2 sm:w-auto sm:max-w-md'
>
  <div class='flex items-center'>
    <div id='toast-icon' class='flex-shrink-0 mr-2 sm:mr-3'></div>
    <div id='toast-message' class='text-sm font-medium sm:text-base'></div>
  </div>
</div>

<script define:vars={{ smsText, qrModal, countryParam, countryDetails }}>
  function showToast(message, type = 'success') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toast-message');
    const toastIcon = document.getElementById('toast-icon');

    if (!toast || !toastMessage || !toastIcon) return;

    toast.classList.remove('bg-green-50', 'text-green-700', 'bg-red-50', 'text-red-700');

    toastMessage.textContent = message;

    if (type === 'success') {
      toastIcon.innerHTML = `<svg class="w-5 h-5 text-green-500 sm:w-6 sm:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>`;
      toast.classList.add('bg-green-50', 'text-green-700');
    } else {
      toastIcon.innerHTML = `<svg class="w-5 h-5 text-red-500 sm:w-6 sm:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>`;
      toast.classList.add('bg-red-50', 'text-red-700');
    }

    toast.classList.remove('hidden');
    setTimeout(() => {
      toast.classList.remove('translate-y-full', 'opacity-0');
    }, 10);

    setTimeout(() => {
      toast.classList.add('translate-y-full', 'opacity-0');
      setTimeout(() => {
        toast.classList.add('hidden');
      }, 300);
    }, 5000);
  }

  const button = document.querySelector('#send-link-button');
  const phoneInput = document.querySelector('input[name="phoneNumber"]');
  const prefixSpan = document.querySelector('#phone-prefix');

  const clientCountryDetails = countryDetails[countryParam] || countryDetails['ARE'];
  const countryCode = clientCountryDetails.prefix;
  const validationRegex = new RegExp(clientCountryDetails.regex.source);
  if (prefixSpan) prefixSpan.textContent = countryCode;
  if (phoneInput) phoneInput.placeholder = clientCountryDetails.placeholder;
  
  // Function to validate Pakistan phone number
  function validatePakistanNumber(number) {
    // Strip spaces
    const stripped = number.replace(/\s+/g, '');
    // Pakistan numbers must be 10 digits and start with 3
    return /^3\d{9}$/.test(stripped);
  }

  // Add input validation as user types
  phoneInput?.addEventListener('input', function() {
    const value = this.value.replace(/\s+/g, '');
    
    // For Pakistan numbers, only allow digits and ensure first digit is 3 if it exists
    if (countryParam === 'PAK') {
      // Only allow digits
      this.value = this.value.replace(/[^0-9]/g, '');
      
      // Enforce max length
      if (this.value.length > 10) {
        this.value = this.value.slice(0, 10);
      }
    }
  });

  button?.addEventListener('click', async (e) => {
    e.preventDefault();
    if (!phoneInput) return;

    const phoneNumber = phoneInput.value.replace(/\s+/g, '');

    // Validate based on country
    let isValid = false;
    if (countryParam === 'PAK') {
      isValid = validatePakistanNumber(phoneNumber);
    } else {
      isValid = validationRegex.test(phoneNumber);
    }

    if (phoneNumber && isValid) {
      const submitButton = document.querySelector('#send-link-button');

      try {
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.innerHTML = `<svg class="w-4 h-4 text-white animate-spin sm:w-5 sm:h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>`;
        }

        const requestBody = {
          mobile: `${countryCode}${phoneNumber}`,
          country: countryParam,
        };

        const response = await fetch('https://remit-dev.jinglepay.dev/api/rb2b-send-sms-app-download', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody),
        });

        const responseDataText = await response.text();

        if (submitButton) {
          submitButton.innerHTML = `<svg xmlns='http://www.w3.org/2000/svg' class='w-4 h-4 sm:w-5 sm:h-5' fill='none' viewBox='0 0 24 24' stroke='currentColor'>
            <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M14 5l7 7m0 0l-7 7m7-7H3'></path>
          </svg>`;
          submitButton.disabled = false;
        }

        if (response.ok && (responseDataText.includes('success') || responseDataText.includes('Sent'))) {
          showToast(qrModal.linkSent, 'success');
          phoneInput.value = '';
        } else {
          console.warn('SMS API Response Status:', response.status);
          console.warn('SMS API Response Body:', responseDataText);
          showToast(qrModal.failed, 'error');
        }
      } catch (error) {
        console.error('Error sending SMS:', error);
        showToast(qrModal.failed, 'error');

        const submitButton = document.querySelector('#send-link-button');
        if (submitButton) {
          submitButton.innerHTML = `<svg xmlns='http://www.w3.org/2000/svg' class='w-4 h-4 sm:w-5 sm:h-5' fill='none' viewBox='0 0 24 24' stroke='currentColor'>
            <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M14 5l7 7m0 0l-7 7m7-7H3'></path>
          </svg>`;
          submitButton.disabled = false;
        }
      }
    } else {
      // Show specific error message based on country code
      if (countryParam === 'PAK') {
        if (!phoneNumber) {
          showToast('Please enter a mobile number', 'error');
        } else if (phoneNumber.length !== 10) {
          showToast('Pakistan mobile number must be 10 digits long', 'error');
        } else if (phoneNumber[0] !== '3') {
          showToast('Pakistan mobile number must start with 3', 'error');
        } else {
          showToast('Please enter a valid mobile number', 'error');
        }
      } else if (countryParam === 'ARE') {
        if (!phoneNumber) {
          showToast('Please enter a mobile number', 'error');
        } else if (phoneNumber.length !== 9) {
          showToast('UAE mobile number must be 9 digits long', 'error');
        } else {
          showToast('Please enter a valid UAE mobile number', 'error');
        }
      } else {
        showToast(qrModal.hint || 'Please enter a valid mobile number', 'error');
      }
    }
  });
</script>
