---
/**
 * Transfer Calculator Component - Refactored for Production
 *
 * A reusable calculator widget for money transfer calculations.
 * Displays send/receive amounts, currency selection, fees, and exchange rates.
 * Integrates with remittance exchange API for real-time conversion rates.
 * 
 * This version uses external JS files to work with Astro's production build constraints.
 */

import { getRemittanceRates } from '@helpers/remittance-exchange';

// Define props with defaults
export interface Props {
  initialSendAmount?: number;
  initialSendCurrency?: string;
  initialReceiveCurrency?: string;
}

const { initialSendAmount = 1000, initialSendCurrency = 'AED', initialReceiveCurrency = 'USD' } = Astro.props;

// Get initial exchange rate data using the real API
const exchangeData = await getRemittanceRates('AE', {
  quotation_mode: 'SEND_AMOUNT',
  receive: {
    country_code: initialReceiveCurrency === 'INR' ? 'IN' : initialReceiveCurrency === 'PKR' ? 'PK' : 'US',
    currency: initialReceiveCurrency,
  },
  send: {
    amount: initialSendAmount,
    currency: initialSendCurrency,
    country_code: 'AE',
  },
});

// Check if we got an API error
const isApiError = exchangeData && exchangeData.__apiError === true;

// Extract values from exchange data - handle API errors gracefully
const sendAmount = initialSendAmount.toString();
const sendCurrency = initialSendCurrency;
const receiveAmount = isApiError ? '0.00' : exchangeData.receive.amount.toFixed(2);
const receiveCurrency = initialReceiveCurrency;
const transferFee = isApiError ? 'Error' : `${exchangeData.fee.amount.toFixed(3)} ${exchangeData.fee.currency}`;
const exchangeRate = isApiError ? 'API Error' : `1.00 ${sendCurrency} = ${exchangeData.quotations[0]?.transfer_fx_rate.toFixed(2)} ${receiveCurrency}`;

// Log error to console if present
if (isApiError) {
  console.error(`API Error during build: ${exchangeData.errorMessage}`);
}
---

<div
  class='w-full lg:w-[484px] p-4 sm:p-6 lg:p-8 bg-[#F3F5F6] rounded-2xl flex flex-col gap-5'
  aria-labelledby='calculator-heading'
>
  <h2 id='calculator-heading' class='sr-only'>Money Transfer Calculator</h2>
  
  <!-- You send section -->
  <div class='w-full'>
    <label for='send-amount' class='block mb-2 text-sm font-normal font-[Hero_New] text-black leading-tight'>
      You send:
    </label>
    <div class='flex items-center justify-between px-4 py-4 bg-[#F3F4F5] border border-[#C8C8C8] rounded-lg'>
      <div class='relative'>
        <input
          type='text'
          inputmode='decimal'
          id='send-amount'
          value={sendAmount}
          class='text-xl font-normal font-[Hero_New] text-black leading-relaxed w-full max-w-[100px] focus:outline-none'
          placeholder='0'
          aria-describedby='send-currency'
          data-calculator-send-input
          maxlength='6'
          pattern='[0-9]+(\.[0-9]+)?'
          aria-label='Enter amount (max 100,000 AED)'
        />
        <div class='absolute left-0 right-0 -bottom-6'>
          <small class='hidden text-xs font-medium text-red-600' data-validation-message></small>
        </div>
      </div>
      
      <div class='flex items-center gap-2'>
        <!-- UAE Flag - Static implementation -->
        <div class='relative flex-shrink-0 w-6 h-6 send-currency-flag' aria-hidden='true'>
          <div class='absolute top-0 w-6 h-2 bg-green-800'></div>
          <div class='absolute w-6 h-2 bg-[#F3F5F6] top-2'></div>
          <div class='absolute bottom-0 w-6 h-2 bg-black'></div>
          <div class='w-1.5 h-6 absolute left-0 bg-red-600'></div>
        </div>
        <div
          class='px-3 py-1 text-sm font-medium text-black bg-transparent border-none cursor-default'
          id='send-currency'
          aria-label='Send currency: AED'
          data-calculator-send-currency
        >
          <span data-send-currency-text>AED</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Recipient receives section -->
  <div class='w-full'>
    <label for='receive-amount' class='block mb-2 text-sm font-normal font-[Hero_New] text-black leading-tight'>
      Recipient receives:
    </label>
    <div class='flex items-center justify-between px-4 py-4 bg-[#F3F4F5] border border-[#C8C8C8] rounded-lg'>
      <input
        type='text'
        inputmode='decimal'
        id='receive-amount'
        value={receiveAmount}
        class='text-xl font-normal font-[Hero_New] text-black leading-relaxed w-full max-w-[100px] focus:outline-none'
        placeholder='0'
        aria-describedby='receive-currency'
        data-calculator-receive-input
        readonly
      />
      
      <div class='relative flex items-center gap-2'>
        <!-- Currency flag - will be updated by JavaScript -->
        <div
          class='relative flex-shrink-0 w-6 h-6 overflow-hidden bg-blue-900 receive-currency-flag'
          aria-hidden='true'
        >
          🇺🇸
        </div>
        
        <button
          type='button'
          class='flex items-center gap-2 px-3 py-1 text-sm font-medium text-black bg-transparent border-none cursor-pointer hover:bg-gray-100 rounded'
          id='receive-currency'
          aria-label={`Select receive currency, currently ${receiveCurrency}`}
          data-calculator-receive-currency
          aria-haspopup='true'
          aria-expanded='false'
        >
          <span data-receive-currency-text>{receiveCurrency}</span>
          <svg
            xmlns='http://www.w3.org/2000/svg'
            width='16'
            height='16'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'
            stroke-linecap='round'
            stroke-linejoin='round'
          >
            <polyline points='6,9 12,15 18,9'></polyline>
          </svg>
        </button>
        
        <!-- Dropdown menu -->
        <div
          class='absolute top-full right-0 z-10 hidden mt-1 bg-white border border-gray-300 rounded-md shadow-lg min-w-[120px]'
          data-receive-currency-dropdown
          role='menu'
        >
          <!-- Options will be populated by JavaScript -->
        </div>
      </div>
    </div>
  </div>

  <!-- Transfer details -->
  <div class='w-full space-y-5'>
    <!-- Transfer fee -->
    <div class='flex items-center justify-between'>
      <p class='text-sm font-normal font-[Hero_New] text-black leading-tight'>Transfer fee:</p>
      <p class='text-sm font-normal font-[Hero_New] text-black leading-tight' data-transfer-fee>{transferFee}</p>
    </div>

    <!-- Exchange rate -->
    <div class='flex items-center justify-between'>
      <p class='text-sm font-normal font-[Hero_New] text-black leading-tight'>Exchange rate:</p>
      <div class='flex items-center gap-2'>
        <p class='text-sm font-normal font-[Hero_New] text-black leading-tight' data-exchange-rate>{exchangeRate}</p>
        <button
          type='button'
          class='p-1 text-gray-500 hover:text-gray-700'
          aria-label='Exchange rate information'
          title='Exchange rates are updated in real-time'
        >
          <svg
            xmlns='http://www.w3.org/2000/svg'
            width='16'
            height='16'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'
            stroke-linecap='round'
            stroke-linejoin='round'
          >
            <circle cx='12' cy='12' r='10'></circle>
            <line x1='12' y1='16' x2='12' y2='12'></line>
            <line x1='12' y1='8' x2='12.01' y2='8'></line>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Send money button -->
  <button
    id='cta-transfer-send'
    type='button'
    class='w-full px-6 py-4 text-lg font-semibold text-white bg-black rounded-[14px] hover:bg-gray-800 transition-colors duration-300'
  >
    Send money now
  </button>
</div>

<!-- Load calculator utilities using proper Astro script handling -->
<script>
  // Import the calculator utilities module
  import { getRemittanceRates } from '@helpers/remittance-exchange';
  import { triggerAppRedirect } from '@util/handleAppRedirect';

  // Global calculator state
  window.calculatorState = {
    countries: {},
    currentSendCurrency: 'AED',
    currentReceiveCurrency: 'USD',
    isLoading: false
  };

  // Calculator utilities functions
  async function fetchCountriesData() {
    try {
      console.log('Fetching countries data from API...');
      
      const testResponse = await getRemittanceRates('AE', {
        quotation_mode: 'SEND_AMOUNT',
        receive: {
          country_code: 'US',
          currency: 'USD',
        },
        send: {
          amount: 1000,
          currency: 'AED',
          country_code: 'AE',
        },
      });

      console.log('API Response structure:', testResponse);
      
      let countriesData = {};
      
      if (testResponse.countries) {
        countriesData = testResponse.countries;
      } else if (testResponse.supported_countries) {
        countriesData = testResponse.supported_countries;
      } else {
        console.log('No countries data in API response, discovering available currencies...');
        
        const commonCurrencies = ['USD', 'INR', 'PKR', 'BDT', 'PHP', 'LKR', 'NPR', 'EGP', 'JOD', 'THB'];
        const countryCodeMap = {
          'USD': 'US', 'INR': 'IN', 'PKR': 'PK', 'BDT': 'BD', 'PHP': 'PH',
          'LKR': 'LK', 'NPR': 'NP', 'EGP': 'EG', 'JOD': 'JO', 'THB': 'TH'
        };
        
        for (const currency of commonCurrencies) {
          try {
            const countryCode = countryCodeMap[currency];
            const testCall = await getRemittanceRates('AE', {
              quotation_mode: 'SEND_AMOUNT',
              receive: {
                country_code: countryCode,
                currency: currency,
              },
              send: {
                amount: 100,
                currency: 'AED',
                country_code: 'AE',
              },
            });
            
            if (testCall && testCall.receive) {
              countriesData[countryCode] = {
                code: countryCode,
                currency: currency,
                iso2_code: countryCode,
                name: testCall.country_name || countryCode,
                unicode: getFlagEmoji(countryCode)
              };
            }
          } catch (currencyError) {
            console.log(`Currency ${currency} not supported:`, currencyError.message);
          }
        }
      }

      window.calculatorState.countries = countriesData;
      console.log('Countries data loaded successfully from API:', countriesData);
      return countriesData;
    } catch (error) {
      console.error('Error fetching countries data from API:', error);
      throw error;
    }
  }

  function getFlagEmoji(countryCode) {
    const flagMap = {
      'US': '🇺🇸', 'IN': '🇮🇳', 'PK': '🇵🇰', 'BD': '🇧🇩', 'PH': '🇵🇭',
      'LK': '🇱🇰', 'NP': '🇳🇵', 'EG': '🇪🇬', 'JO': '🇯🇴', 'TH': '🇹🇭'
    };
    return flagMap[countryCode] || '🏳️';
  }

  async function calculateExchange() {
    const sendInput = document.querySelector('[data-calculator-send-input]');
    const receiveInput = document.querySelector('[data-calculator-receive-input]');
    const transferFeeElement = document.querySelector('[data-transfer-fee]');
    const exchangeRateElement = document.querySelector('[data-exchange-rate]');
    const sendCurrencyBtn = document.querySelector('[data-calculator-send-currency]');
    const receiveCurrencyBtn = document.querySelector('[data-calculator-receive-currency]');

    if (!sendInput || !receiveInput) {
      console.error('Required input elements not found');
      return;
    }

    const sendAmount = parseFloat(sendInput.value) || 0;
    const sendCurrency = sendCurrencyBtn?.querySelector('[data-send-currency-text]')?.textContent || 'AED';
    const receiveCurrency = receiveCurrencyBtn?.querySelector('[data-receive-currency-text]')?.textContent || 'USD';

    if (sendAmount <= 0) {
      receiveInput.value = '0.00';
      return;
    }

    window.calculatorState.isLoading = true;
    if (receiveInput) receiveInput.value = 'Loading...';

    try {
      const receiveCountryCode = getCountryCodeForCurrency(receiveCurrency);
      
      const exchangeData = await getRemittanceRates('AE', {
        quotation_mode: 'SEND_AMOUNT',
        receive: {
          country_code: receiveCountryCode,
          currency: receiveCurrency,
        },
        send: {
          amount: sendAmount,
          currency: sendCurrency,
          country_code: 'AE',
        },
      });

      if (receiveInput) receiveInput.value = exchangeData.receive.amount.toFixed(2);
      if (transferFeeElement) transferFeeElement.textContent = `${exchangeData.fee.amount.toFixed(3)} ${exchangeData.fee.currency}`;
      if (exchangeRateElement) {
        const rate = exchangeData.quotations[0]?.transfer_fx_rate || 1.0;
        exchangeRateElement.textContent = `1.00 ${sendCurrency} = ${rate.toFixed(4)} ${receiveCurrency}`;
      }

      console.log('Exchange calculation completed successfully');
    } catch (error) {
      console.error('Error calculating exchange:', error);
      if (receiveInput) receiveInput.value = 'Error';
      if (transferFeeElement) transferFeeElement.textContent = 'N/A';
      if (exchangeRateElement) exchangeRateElement.textContent = 'Rate unavailable';
    } finally {
      window.calculatorState.isLoading = false;
    }
  }

  function getCountryCodeForCurrency(currency) {
    const countries = window.calculatorState.countries || {};
    
    for (const [countryCode, countryData] of Object.entries(countries)) {
      if (countryData.currency === currency) {
        return countryCode;
      }
    }
    
    console.warn(`Country code not found for currency: ${currency}`);
    return 'US';
  }

  function setupDropdowns() {
    const receiveCurrencyBtn = document.querySelector('[data-calculator-receive-currency]');
    const receiveCurrencyDropdown = document.querySelector('[data-receive-currency-dropdown]');
    const receiveCurrencyText = document.querySelector('[data-receive-currency-text]');
    const receiveCurrencyFlag = document.querySelector('.receive-currency-flag');

    if (!receiveCurrencyBtn || !receiveCurrencyDropdown) {
      console.error('Dropdown elements not found');
      return;
    }

    receiveCurrencyDropdown.innerHTML = '';
    Object.values(window.calculatorState.countries).forEach((country) => {
      const button = document.createElement('button');
      button.className = 'w-full px-4 py-2 text-sm text-left text-gray-700 hover:bg-[#F3F5F6]';
      button.dataset.currency = country.currency;
      button.dataset.countryCode = country.code;

      const div = document.createElement('div');
      div.className = 'flex items-center gap-2';

      const flagSpan = document.createElement('span');
      flagSpan.className = 'currency-flag';
      flagSpan.textContent = country.unicode;

      const currencySpan = document.createElement('span');
      currencySpan.textContent = country.currency;

      div.appendChild(flagSpan);
      div.appendChild(currencySpan);
      button.appendChild(div);
      receiveCurrencyDropdown.appendChild(button);

      button.addEventListener('click', (e) => {
        e.preventDefault();
        
        if (receiveCurrencyText) receiveCurrencyText.textContent = country.currency;
        if (receiveCurrencyFlag) receiveCurrencyFlag.textContent = country.unicode;
        
        window.calculatorState.currentReceiveCurrency = country.currency;
        
        receiveCurrencyDropdown.classList.add('hidden');
        receiveCurrencyBtn.setAttribute('aria-expanded', 'false');
        
        calculateExchange();
      });
    });

    receiveCurrencyBtn.addEventListener('click', (e) => {
      e.preventDefault();
      const isExpanded = receiveCurrencyBtn.getAttribute('aria-expanded') === 'true';
      
      if (isExpanded) {
        receiveCurrencyDropdown.classList.add('hidden');
        receiveCurrencyBtn.setAttribute('aria-expanded', 'false');
      } else {
        receiveCurrencyDropdown.classList.remove('hidden');
        receiveCurrencyBtn.setAttribute('aria-expanded', 'true');
      }
    });

    document.addEventListener('click', (e) => {
      if (!receiveCurrencyBtn.contains(e.target) && !receiveCurrencyDropdown.contains(e.target)) {
        receiveCurrencyDropdown.classList.add('hidden');
        receiveCurrencyBtn.setAttribute('aria-expanded', 'false');
      }
    });
  }

  async function initCalculator() {
    console.log('Initializing calculator...');
    
    await fetchCountriesData();
    setupDropdowns();
    
    // No need for initial API call since data is loaded server-side
    
    const sendInput = document.querySelector('[data-calculator-send-input]') as HTMLInputElement;
    const submitButton = document.querySelector('#cta-transfer-send');
    
    if (sendInput) {
      sendInput.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        let value = target.value;
        
        value = value.replace(/[^0-9.]/g, '');
        
        const parts = value.split('.');
        if (parts.length > 2) {
          value = parts[0] + '.' + parts.slice(1).join('');
        }
        
        if (value.length > 6) {
          value = value.substring(0, 6);
        }
        
        target.value = value;
        
        const numValue = parseFloat(value);
        if (!isNaN(numValue) && numValue > 0) {
          calculateExchange();
        }
      });
    }
    
    if (submitButton) {
      submitButton.addEventListener('click', (e: Event) => {
        const sendInputElement = sendInput as HTMLInputElement;
        if (!sendInputElement?.value || parseFloat(sendInputElement.value) <= 0) {
          const validationMessage = document.querySelector('[data-validation-message]');
          if (validationMessage) {
            validationMessage.textContent = 'Please enter an amount to send';
            validationMessage.classList.remove('hidden');
            setTimeout(() => validationMessage.classList.add('hidden'), 3000);
          }
          e.preventDefault();
          return;
        }
        
        triggerAppRedirect(e as any);
      });
    }
    
    console.log('Calculator initialized successfully');
  }



  // Expose functions globally
  window.calculatorUtils = {
    fetchCountriesData,
    calculateExchange,
    setupDropdowns,
    initCalculator,
    triggerAppRedirect
  };
</script>

<!-- Initialize calculator with passed variables -->
<script define:vars={{ sendAmount, sendCurrency, receiveAmount, receiveCurrency, transferFee, exchangeRate }}>
  // Pass initial values to the calculator
  window.calculatorInitialValues = {
    sendAmount: sendAmount,
    sendCurrency: sendCurrency,
    receiveAmount: receiveAmount,
    receiveCurrency: receiveCurrency,
    transferFee: transferFee,
    exchangeRate: exchangeRate
  };

  // Initialize calculator when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      if (window.calculatorUtils && window.calculatorUtils.initCalculator) {
        window.calculatorUtils.initCalculator();
      }
    });
  } else {
    if (window.calculatorUtils && window.calculatorUtils.initCalculator) {
      window.calculatorUtils.initCalculator();
    }
  }
</script>
