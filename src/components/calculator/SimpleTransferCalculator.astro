---
/**
 * Simple Transfer Calculator Component
 *
 * A clean, minimal calculator for money transfers
 */

interface Props {
  initialSendAmount?: number;
}

const { initialSendAmount = 1000 } = Astro.props;
---

<div class="transfer-calculator p-6 bg-gray-100 rounded-xl shadow-sm">
  <h2 class="text-xl font-medium mb-4">Money Transfer Calculator</h2>
  
  <!-- Send amount -->
  <div class="mb-4">
    <label for="send-amount" class="block mb-2 text-sm font-medium text-gray-700">
      You send:
    </label>
    <div class="flex items-center border border-gray-300 rounded-lg bg-white p-3">
      <input
        type="text"
        id="send-amount"
        value={initialSendAmount.toString()}
        class="text-lg font-medium w-full max-w-[120px] focus:outline-none bg-transparent"
        placeholder="0"
        data-send-input
      />
      <div class="flex items-center">
        <span class="text-lg font-medium" id="send-currency">AED</span>
      </div>
    </div>
  </div>
  
  <!-- Receive amount -->
  <div class="mb-4">
    <label for="receive-amount" class="block mb-2 text-sm font-medium text-gray-700">
      Recipient receives:
    </label>
    <div class="flex items-center border border-gray-300 rounded-lg bg-white p-3">
      <input
        type="text"
        id="receive-amount"
        value="0.00"
        class="text-lg font-medium w-full max-w-[120px] focus:outline-none bg-transparent"
        placeholder="0"
        data-receive-input
        readonly
      />
      <div class="flex items-center relative">
        <!-- Receive currency button with dropdown -->
        <button 
          type="button" 
          id="receive-currency-btn"
          class="text-lg font-medium flex items-center gap-1"
        >
          <span id="receive-currency-text">USD</span>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>
        </button>
        
        <!-- Dropdown (hidden initially) -->
        <div id="receive-currency-dropdown" class="hidden absolute right-0 z-10 w-48 mt-2 top-full bg-white border border-gray-200 rounded-lg shadow-lg">
          <div class="py-1" id="receive-currency-list">
            <!-- Currencies will be populated here -->
            <div class="px-4 py-2 text-sm text-gray-500">Loading currencies...</div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Exchange rate -->
  <div class="text-sm text-gray-600 mb-4">
    <span>Exchange rate: </span>
    <span id="exchange-rate">1 AED = 0.27 USD</span>
  </div>
  
  <!-- Send money button -->
  <button
    type="button"
    class="w-full px-4 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700"
    id="calculate-btn"
  >
    Send money now
  </button>
</div>

<script>
  // Simple initialization when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    // Get elements
    const sendInput = document.getElementById('send-amount');
    const receiveInput = document.getElementById('receive-amount');
    const receiveCurrencyBtn = document.getElementById('receive-currency-btn');
    const receiveCurrencyDropdown = document.getElementById('receive-currency-dropdown');
    const receiveCurrencyList = document.getElementById('receive-currency-list');
    const exchangeRateEl = document.getElementById('exchange-rate');
    
    // Current state
    let state = {
      sendAmount: 1000,
      sendCurrency: 'AED',
      receiveCurrency: 'GBP',
      exchangeRate: 0.21,
      countriesData: []
    };
    
    // Fetch countries data from API
    async function fetchCountriesData() {
      try {
        console.log('Fetching countries data from API...');
        const response = await fetch('https://api.jinglepay.dev/api/v0/remittance/countries/');
        if (!response.ok) {
          throw new Error(`API request failed with status ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Countries data fetched:', data.length);
        
        state.countriesData = data;
        return data;
      } catch (error) {
        console.error('Failed to fetch countries data:', error);
        return [];
      }
    }
    
    // Toggle dropdown visibility
    function toggleDropdown() {
      console.log('Toggle dropdown clicked');
      const isHidden = receiveCurrencyDropdown.classList.contains('hidden');
      
      if (isHidden) {
        receiveCurrencyDropdown.classList.remove('hidden');
        console.log('Showing dropdown');
      } else {
        receiveCurrencyDropdown.classList.add('hidden');
        console.log('Hiding dropdown');
      }
    }
    
    // Calculate receive amount based on exchange rate
    function calculateReceiveAmount() {
      const amount = state.sendAmount * state.exchangeRate;
      receiveInput.value = amount.toFixed(2);
      
      // Update exchange rate display
      exchangeRateEl.textContent = `1 ${state.sendCurrency} = ${state.exchangeRate} ${state.receiveCurrency}`;
    }
    
    // Populate dropdown with currencies from API data
    function populateDropdown() {
      if (!receiveCurrencyList) return;
      
      // Show loading message
      receiveCurrencyList.innerHTML = '<div class="px-4 py-2 text-sm text-gray-500">Loading currencies...</div>';
      
      // Fetch countries data if not available
      if (!state.countriesData || state.countriesData.length === 0) {
        fetchCountriesData().then(populateDropdownItems);
      } else {
        populateDropdownItems(state.countriesData);
      }
    }
    
    // Create dropdown items from countries data
    function populateDropdownItems(countriesData) {
      if (!receiveCurrencyList || !countriesData || countriesData.length === 0) {
        receiveCurrencyList.innerHTML = '<div class="px-4 py-2 text-sm text-gray-500">No currencies available</div>';
        return;
      }
      
      receiveCurrencyList.innerHTML = '';
      console.log(`Populating dropdown with ${countriesData.length} countries`);
      
      // Default exchange rates (simplified - in real app would be fetched from API)
      const exchangeRates = {
        USD: 0.27,
        EUR: 0.25,
        GBP: 0.21,
        INR: 20.5,
        PKR: 75.0
      };
      
      countriesData.forEach(country => {
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.className = 'flex items-center w-full px-4 py-2 text-left hover:bg-gray-100';
        
        const currencyCode = country.currency_code;
        const countryName = country.name;
        const exchangeRate = exchangeRates[currencyCode] || 0.5; // Fallback rate
        
        // Create flag span
        const flagEl = document.createElement('span');
        flagEl.className = 'flex-shrink-0 w-6 h-6 flex items-center justify-center mr-2';
        // Use country code to emoji flag or fallback to globe
        flagEl.textContent = getCountryFlagEmoji(country.country_code) || '🌐';
        
        const textEl = document.createElement('span');
        textEl.textContent = `${currencyCode} - ${countryName}`;
        
        btn.appendChild(flagEl);
        btn.appendChild(textEl);
        
        btn.addEventListener('click', () => {
          state.receiveCurrency = currencyCode;
          state.exchangeRate = exchangeRate;
          
          const currencyText = document.getElementById('receive-currency-text');
          if (currencyText) currencyText.textContent = currencyCode;
          
          calculateReceiveAmount();
          toggleDropdown(); // Close dropdown
        });
        
        receiveCurrencyList.appendChild(btn);
      });
    }
    
    // Convert country code to emoji flag
    function getCountryFlagEmoji(countryCode) {
      if (!countryCode) return '🌐';
      
      // Convert country code to regional indicator symbols
      const codePoints = countryCode
        .toUpperCase()
        .split('')
        .map(char => 127397 + char.charCodeAt(0));
      
      return String.fromCodePoint(...codePoints);
    }
    
    // Initialize event listeners
    if (receiveCurrencyBtn) {
      receiveCurrencyBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation(); // Prevent immediate closing
        toggleDropdown();
      });
    }
    
    if (sendInput) {
      sendInput.addEventListener('input', (e) => {
        const value = parseFloat(e.target.value);
        if (!isNaN(value)) {
          state.sendAmount = value;
          calculateReceiveAmount();
        }
      });
    }
    
    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (receiveCurrencyDropdown && !receiveCurrencyDropdown.contains(e.target) && 
          receiveCurrencyBtn && !receiveCurrencyBtn.contains(e.target)) {
        receiveCurrencyDropdown.classList.add('hidden');
      }
    });
    
    // Initialize dropdown
    populateDropdown();
    
    // Calculate initial receive amount
    calculateReceiveAmount();
    
    console.log('Simple transfer calculator initialized');
  });
</script>
