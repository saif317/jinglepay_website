---
// Testimonial data that would normally come from a CMS or data file
const testimonials = [
  {
    name: 'Ahmed Al-Mansoori',
    location: 'Dubai, UAE',
    rating: 5,
    quote: 'JinglePay has completely transformed how I send money to my family back home. The rates are better than any bank, and the money arrives instantly. Couldn\'t be happier!',
    avatar: '/images/testimonials/avatar-1.jpg'
  },
  {
    name: 'Fatima Khan',
    location: 'Abu Dhabi, UAE',
    rating: 5,
    quote: 'The platinum card is amazing - no fees, works everywhere, and the app lets me control everything. Customer service is top-notch too!',
    avatar: '/images/testimonials/avatar-2.jpg'
  },
  {
    name: 'Raj Patel',
    location: 'Sharjah, UAE',
    rating: 5,
    quote: 'I\'ve used several fintech apps, but JinglePay offers the best value and user experience. The currency conversion rates are unbeatable!',
    avatar: '/images/testimonials/avatar-3.jpg'
  },
  {
    name: 'Sarah Williams',
    location: 'Dubai, UAE',
    rating: 5,
    quote: 'Splitting bills with friends is so easy with JinglePay. We use it for all our group expenses and everyone loves how simple it is.',
    avatar: '/images/testimonials/avatar-4.jpg'
  }
];
---

<section class="testimonials py-16">
  <div class="container mx-auto px-4 text-center">
    <h2 class="text-3xl md:text-4xl font-bold mb-12">What Our Users Say</h2>
    
    <div class="testimonials-slider relative max-w-5xl mx-auto">
      <!-- Desktop View (3 testimonials visible) -->
      <div class="hidden md:grid grid-cols-3 gap-6">
        {testimonials.slice(0, 3).map((testimonial) => (
          <div class="testimonial-card bg-white p-6 rounded-xl shadow-lg hover:shadow-xl transition-shadow border border-gray-100 text-left">
            <div class="flex items-center mb-4">
              <div class="avatar mr-4">
                <img src={testimonial.avatar} alt={testimonial.name} class="w-12 h-12 rounded-full object-cover" />
              </div>
              <div>
                <h4 class="font-semibold">{testimonial.name}</h4>
                <p class="text-sm text-gray-600">{testimonial.location}</p>
              </div>
            </div>
            
            <div class="rating flex mb-3">
              {Array.from({ length: testimonial.rating }).map(() => (
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-yellow-500" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
              ))}
            </div>
            
            <p class="text-gray-700">{testimonial.quote}</p>
          </div>
        ))}
      </div>
      
      <!-- Mobile View (Carousel - only one visible at a time) -->
      <div class="relative md:hidden">
        <div class="testimonials-carousel overflow-hidden">
          <div class="flex transition-transform duration-300 ease-in-out transform translate-x-0" id="carousel-inner">
            {testimonials.map((testimonial, index) => (
              <div class={`testimonial-card flex-shrink-0 w-full p-6 bg-white rounded-xl shadow-lg border border-gray-100 text-left`}>
                <div class="flex items-center mb-4">
                  <div class="avatar mr-4">
                    <img src={testimonial.avatar} alt={testimonial.name} class="w-12 h-12 rounded-full object-cover" />
                  </div>
                  <div>
                    <h4 class="font-semibold">{testimonial.name}</h4>
                    <p class="text-sm text-gray-600">{testimonial.location}</p>
                  </div>
                </div>
                
                <div class="rating flex mb-3">
                  {Array.from({ length: testimonial.rating }).map(() => (
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-yellow-500" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                  ))}
                </div>
                
                <p class="text-gray-700">{testimonial.quote}</p>
              </div>
            ))}
          </div>
        </div>
        
        <!-- Mobile Navigation Dots -->
        <div class="flex justify-center mt-6 space-x-2">
          {testimonials.map((_, index) => (
            <button 
              class={`w-3 h-3 rounded-full transition-colors duration-300 ${index === 0 ? 'bg-[#794eff]' : 'bg-gray-300'}`}
              data-index={index}
              aria-label={`Go to testimonial ${index + 1}`}
            ></button>
          ))}
        </div>
      </div>
      
      <!-- Navigation Arrows (visible on both mobile and desktop) -->
      <button 
        id="prev-testimonial" 
        class="absolute top-1/2 -translate-y-1/2 -left-4 md:-left-12 bg-white w-10 h-10 rounded-full shadow-lg flex items-center justify-center focus:outline-none"
        aria-label="Previous testimonial"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      
      <button 
        id="next-testimonial" 
        class="absolute top-1/2 -translate-y-1/2 -right-4 md:-right-12 bg-white w-10 h-10 rounded-full shadow-lg flex items-center justify-center focus:outline-none"
        aria-label="Next testimonial"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const testimonials = document.querySelectorAll('.testimonial-card');
    const carousel = document.getElementById('carousel-inner');
    const prevButton = document.getElementById('prev-testimonial');
    const nextButton = document.getElementById('next-testimonial');
    const navigationDots = document.querySelectorAll('[data-index]');
    
    if (!carousel || testimonials.length <= 1) return;
    
    let currentIndex = 0;
    const testimonialCount = testimonials.length;
    
    // Function to update the active dot
    function updateActiveDot() {
      navigationDots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.add('bg-[#794eff]');
          dot.classList.remove('bg-gray-300');
        } else {
          dot.classList.add('bg-gray-300');
          dot.classList.remove('bg-[#794eff]');
        }
      });
    }
    
    // Function to show a specific testimonial
    function showTestimonial(index) {
      currentIndex = index;
      if (carousel) {
        carousel.style.transform = `translateX(-${index * 100}%)`;
      }
      updateActiveDot();
    }
    
    // Handle next button click
    nextButton?.addEventListener('click', () => {
      currentIndex = (currentIndex + 1) % testimonialCount;
      showTestimonial(currentIndex);
    });
    
    // Handle prev button click
    prevButton?.addEventListener('click', () => {
      currentIndex = (currentIndex - 1 + testimonialCount) % testimonialCount;
      showTestimonial(currentIndex);
    });
    
    // Handle dot clicks
    navigationDots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        showTestimonial(index);
      });
    });
    
    // Auto-rotate testimonials
    setInterval(() => {
      currentIndex = (currentIndex + 1) % testimonialCount;
      showTestimonial(currentIndex);
    }, 5000);
  });
</script>
