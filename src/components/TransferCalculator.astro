---
// Component for transfer calculator UI with API integration

// Types for API
type Payment = { amount: number; currency: string };
type Transaction = Payment & { country_code: string };

type Quotation = {
  id: string;
  provider: string;
  transfer_type: string;
  transfer_fx_rate: number;
  fee: Payment;
  expire_at: Date;
  best_offer: boolean;
  receive: Transaction;
  operation: string;
  transfer_channel_name: string;
};

type RemittanceExchangeResponse = {
  id: string;
  quotation_mode: 'SEND_AMOUNT';
  send: Transaction;
  receive: Transaction;
  user_saves: Payment;
  last_updated: string;
  expired_at: string;
  fee: Payment;
  quotations: Quotation[];
};

type ExchangeRequest = {
  quotation_mode: 'SEND_AMOUNT';
  receive: {
    country_code: string;
    currency: string;
  };
  send: Transaction;
};
---

<div class='w-full max-w-md p-6 bg-gray-100 shadow-lg rounded-2xl' id='transfer-calculator'>
  <!-- You send section -->
  <div class='mb-6'>
    <label class="text-black text-sm font-normal font-['Hero_New'] leading-tight block mb-2"> You send: </label>
    <div class='relative'>
      <input
        type='number'
        value='1000'
        id='send-amount'
        class="border-stone-300 bg-white w-full text-black text-xl font-normal font-['Hero_New'] leading-relaxed border rounded-lg px-3 py-4 pr-20 focus:outline-none focus:ring-2 focus:ring-black"
      />
      <div class='absolute flex items-center gap-2 transform -translate-y-1/2 right-3 top-1/2'>
        <span class="text-black text-xl font-normal font-['Hero_New'] leading-relaxed">🇦🇪</span>
        <span class="text-black text-xl font-normal font-['Hero_New'] leading-relaxed">AED</span>
        <span class='text-gray-400'>▼</span>
      </div>
    </div>
  </div>

  <!-- Recipient receives section -->
  <div class='mb-6'>
    <label class="text-black text-sm font-normal font-['Hero_New'] leading-tight block mb-2">
      Recipient receives:
    </label>
    <div class='relative'>
      <input
        type='number'
        value='270'
        id='receive-amount'
        readonly
        class="border-stone-300 bg-white w-full text-black text-xl font-normal font-['Hero_New'] leading-relaxed border rounded-lg px-3 py-4 pr-20 focus:outline-none focus:ring-2 focus:ring-black"
      />
      <div class='absolute flex items-center gap-2 transform -translate-y-1/2 right-3 top-1/2'>
        <select
          id='receive-currency-select'
          class="bg-transparent border-none outline-none text-black text-xl font-normal font-['Hero_New'] leading-relaxed cursor-pointer appearance-none"
        >
          <option value='USD' data-flag='🇺🇸'>🇺🇸 USD</option>
        </select>
        <span class='text-gray-400 pointer-events-none'>▼</span>
      </div>
    </div>
  </div>

  <!-- Transfer details -->
  <div class='mb-6 space-y-3'>
    <!-- Transfer fee -->
    <div class='flex items-center justify-between'>
      <span class="text-black text-sm font-normal font-['Hero_New'] leading-tight"> Transfer fee: </span>
      <span class="text-black text-sm font-normal font-['Hero_New'] leading-tight" id='transfer-fee'> 0.000 AED </span>
    </div>

    <!-- Exchange rate -->
    <div class='flex items-center justify-between'>
      <span class="text-black text-sm font-normal font-['Hero_New'] leading-tight"> Exchange rate: </span>
      <div class='flex items-center gap-1'>
        <span class="text-black text-sm font-normal font-['Hero_New'] leading-tight" id='exchange-rate'>
          1.00 AED = 0.27 USD
        </span>
        <span class='text-gray-400'>ℹ️</span>
      </div>
    </div>
  </div>

  <!-- Send money button -->
  <button
    class="px-5 py-3 bg-gray-900 rounded-xl inline-flex justify-center items-center gap-2.5 w-full hover:bg-gray-900 text-white text-xl font-medium font-['Hero_New'] leading-loose transition-colors duration-200"
  >
    Send money now
  </button>
</div>

<script>
  // API integration for real-time exchange rates
  const API_URL = 'https://api.jinglepay.dev/api/v0/remittance/rates-review/';
  const COUNTRIES_API_URL = 'https://api.jinglepay.dev/api/v0/remittance/countries/';

  let debounceTimer;
  let availableCountries: Countries = {};

  // Types for countries API
  type CountryInfo = { code: string; currency: string; iso2_code: string; name: string; unicode: string };
  type Countries = { [key: string]: CountryInfo };

  // Mock countries data for fallback
  const MOCK_COUNTRIES: Countries = {
    US: {
      code: 'US',
      currency: 'USD',
      iso2_code: 'US',
      name: 'United States',
      unicode: '🇺🇸',
    },
    GB: {
      code: 'GB',
      currency: 'GBP',
      iso2_code: 'GB',
      name: 'United Kingdom',
      unicode: '🇬🇧',
    },
    EU: {
      code: 'EU',
      currency: 'EUR',
      iso2_code: 'EU',
      name: 'European Union',
      unicode: '🇪🇺',
    },
    CA: {
      code: 'CA',
      currency: 'CAD',
      iso2_code: 'CA',
      name: 'Canada',
      unicode: '🇨🇦',
    },
    AU: {
      code: 'AU',
      currency: 'AUD',
      iso2_code: 'AU',
      name: 'Australia',
      unicode: '🇦🇺',
    },
    IN: {
      code: 'IN',
      currency: 'INR',
      iso2_code: 'IN',
      name: 'India',
      unicode: '🇮🇳',
    },
    PK: {
      code: 'PK',
      currency: 'PKR',
      iso2_code: 'PK',
      name: 'Pakistan',
      unicode: '🇵🇰',
    },
    BD: {
      code: 'BD',
      currency: 'BDT',
      iso2_code: 'BD',
      name: 'Bangladesh',
      unicode: '🇧🇩',
    },
    PH: {
      code: 'PH',
      currency: 'PHP',
      iso2_code: 'PH',
      name: 'Philippines',
      unicode: '🇵🇭',
    },
    EG: {
      code: 'EG',
      currency: 'EGP',
      iso2_code: 'EG',
      name: 'Egypt',
      unicode: '🇪🇬',
    },
  };

  // Fetch available countries for the dropdown
  async function fetchCountries() {
    try {
      const response = await fetch(COUNTRIES_API_URL);
      if (!response.ok) {
        throw new Error(`Countries API error: ${response.status}`);
      }
      const countries: Countries = await response.json();
      availableCountries = countries;
      populateCountryDropdown(countries);
    } catch (error) {
      console.error('Error fetching countries:', error);
      // Use mock data if API fails
      console.log('Using mock countries data as fallback');
      availableCountries = MOCK_COUNTRIES;
      populateCountryDropdown(MOCK_COUNTRIES);
    }
  }

  // Populate the country dropdown with fetched data
  function populateCountryDropdown(countries: Countries) {
    const select = document.getElementById('receive-currency-select') as HTMLSelectElement;
    if (!select || !countries || typeof countries !== 'object') return;

    // Clear existing options
    select.innerHTML = '';

    // Iterate through countries object
    Object.values(countries).forEach((country: CountryInfo) => {
      const option = document.createElement('option');

      const currency = country.currency;
      const countryName = country.name;
      const flag = country.unicode || getFlagEmoji(country.iso2_code);

      if (currency) {
        option.value = currency;
        option.textContent = `${flag || '🏳️'} ${currency}`;
        option.dataset.countryCode = country.iso2_code || country.code;
        option.dataset.flag = flag || '🏳️';
        option.dataset.countryName = countryName;
        select.appendChild(option);
      }
    });

    // Set USD as default if available
    const usdOption = select.querySelector('option[value="USD"]');
    if (usdOption) {
      select.value = 'USD';
    }
  }

  // Helper function to get flag emoji from country code
  function getFlagEmoji(countryCode) {
    if (!countryCode || countryCode.length !== 2) return '🏳️';

    const flagMap = {
      US: '🇺🇸',
      GB: '🇬🇧',
      EU: '🇪🇺',
      CA: '🇨🇦',
      AU: '🇦🇺',
      IN: '🇮🇳',
      PK: '🇵🇰',
      BD: '🇧🇩',
      PH: '🇵🇭',
      EG: '🇪🇬',
      AE: '🇦🇪',
      SA: '🇸🇦',
      KW: '🇰🇼',
      QA: '🇶🇦',
      BH: '🇧🇭',
    };

    return flagMap[countryCode.toUpperCase()] || '🏳️';
  }

  // Encryption utility - inline implementation for client-side use
  async function encryptRequest(data: any): Promise<string> {
    try {
      // Import jose dynamically for client-side use
      const { CompactEncrypt, importJWK } = await import('jose');

      const PUBLIC_KEY_CONFIG = {
        kty: 'RSA',
        e: 'AQAB',
        n: 'jiIRvCBjTToaYMHTUxnKoTdKGHdtuymLWl-s3oeiZ9tWXqMeOdbiCYMSzC-N8kkpu5sdmknkVROeKKVS3OvmyxBuZ6hDfwAyfdg0t8273JX6Z7fZH6tL7T2HHJ4ItQesTuhPmJR5_oGiPO5mDjC5SUd5otrbKqUAAy9fLtT5_l91uUc27bZGvkL9Tzi9EHNeA_LgnYRNohOygirKx1G-hdGVWoisVIdiIY7Hc_XaViCCNwhiEELN4iS4MOD4Suut7Y6V5l_PmSCnUcn6-R194edIKHd7TiiFQrkNab2gb16Qdu8fCO41OdRlF_ifvWWxtqHeW3eqRdDYwaBxDvlsnQ',
      };

      const rsaPublicKey = await importJWK(PUBLIC_KEY_CONFIG, 'RSA-OAEP-256');
      const encryptedData = await new CompactEncrypt(new TextEncoder().encode(JSON.stringify(data)))
        .setProtectedHeader({
          alg: 'RSA-OAEP-256',
          enc: 'A256CBC-HS512',
          typ: 'JWE',
        })
        .encrypt(rsaPublicKey);

      return encryptedData;
    } catch (error) {
      console.error('Encryption error:', error);
      throw error;
    }
  }

  async function fetchExchangeRate(sendAmount: string): Promise<any> {
    try {
      // Get selected currency from dropdown
      const currencySelect = document.getElementById('receive-currency-select') as HTMLSelectElement;
      const selectedCurrency = currencySelect?.value || 'USD';
      const selectedOption = currencySelect?.selectedOptions[0];
      const countryCode = selectedOption?.dataset.countryCode || 'US';

      const requestData = {
        quotation_mode: 'SEND_AMOUNT',
        receive: {
          country_code: countryCode,
          currency: selectedCurrency,
        },
        send: {
          amount: parseFloat(sendAmount) || 1000,
          currency: 'AED',
          country_code: 'AE',
        },
      };

      // Encrypt the request data
      const encryptedPayload = await encryptRequest(requestData);

      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: encryptedPayload,
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error fetching exchange rate:', error);
      // Return proper mock data matching RemittanceExchangeResponse type
      const sendAmountNum = parseFloat(sendAmount) || 1000;

      // Get selected currency and country from dropdown
      const currencySelect = document.getElementById('receive-currency-select') as HTMLSelectElement;
      const selectedCurrency = currencySelect?.value || 'USD';
      const selectedOption = currencySelect?.selectedOptions[0];
      const countryCode = selectedOption?.dataset.countryCode || 'US';

      // Mock exchange rates for different currencies
      const mockRates: { [key: string]: number } = {
        USD: 0.27,
        GBP: 0.21,
        EUR: 0.25,
        CAD: 0.37,
        AUD: 0.41,
        INR: 22.75,
        PKR: 75.5,
        BDT: 29.15,
        PHP: 15.25,
        EGP: 13.45,
      };

      const exchangeRate = mockRates[selectedCurrency] || 0.27;
      const receiveAmountNum = sendAmountNum * exchangeRate;

      return {
        id: 'mock-quote-' + Date.now(),
        quotation_mode: 'SEND_AMOUNT',
        send: {
          amount: sendAmountNum,
          currency: 'AED',
          country_code: 'AE',
        },
        receive: {
          amount: receiveAmountNum,
          currency: selectedCurrency,
          country_code: countryCode,
        },
        user_saves: {
          amount: 0,
          currency: 'AED',
        },
        last_updated: new Date().toISOString(),
        expired_at: new Date(Date.now() + 300000).toISOString(), // 5 minutes from now
        fee: {
          amount: 0,
          currency: 'AED',
        },
        quotations: [
          {
            id: 'mock-quotation-' + Date.now(),
            provider: 'Mock Provider',
            transfer_type: 'BANK_TRANSFER',
            transfer_fx_rate: exchangeRate,
            fee: {
              amount: 0,
              currency: 'AED',
            },
            expire_at: new Date(Date.now() + 300000),
            best_offer: true,
            receive: {
              amount: receiveAmountNum,
              currency: selectedCurrency,
              country_code: countryCode,
            },
            operation: 'ENCRYPT',
            transfer_channel_name: 'Standard Transfer',
          },
        ],
      };
    }
  }

  function updateCalculator(data: any) {
    const receiveAmountEl = document.getElementById('receive-amount') as HTMLInputElement;
    const transferFeeEl = document.getElementById('transfer-fee');
    const exchangeRateEl = document.getElementById('exchange-rate');

    if (receiveAmountEl && data.receive) {
      receiveAmountEl.value = data.receive.amount.toFixed(2);
    }

    if (transferFeeEl && data.fee) {
      transferFeeEl.textContent = `${data.fee.amount.toFixed(3)} ${data.fee.currency || 'AED'}`;
    }

    if (exchangeRateEl && data.quotations && data.quotations.length > 0) {
      const rate = data.quotations[0].transfer_fx_rate;
      const currencySelect = document.getElementById('receive-currency-select') as HTMLSelectElement;
      const selectedCurrency = currencySelect?.value || 'USD';
      exchangeRateEl.textContent = `1.00 AED = ${rate.toFixed(2)} ${selectedCurrency}`;
    }
  }

  function handleAmountChange() {
    const sendAmountEl = document.getElementById('send-amount') as HTMLInputElement;
    const amount = sendAmountEl?.value || '1000';

    // Debounce API calls
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(async () => {
      const data = await fetchExchangeRate(amount);
      updateCalculator(data);
    }, 500);
  }

  // Handle currency selection change
  function handleCurrencyChange() {
    const sendAmountEl = document.getElementById('send-amount') as HTMLInputElement;
    const amount = sendAmountEl?.value || '1000';

    // Update exchange rate when currency changes
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(async () => {
      const data = await fetchExchangeRate(amount);
      updateCalculator(data);
    }, 300);
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', () => {
    // Fetch available countries
    fetchCountries();

    const sendAmountEl = document.getElementById('send-amount');
    const currencySelectEl = document.getElementById('receive-currency-select');

    if (sendAmountEl) {
      sendAmountEl.addEventListener('input', handleAmountChange);
    }

    if (currencySelectEl) {
      currencySelectEl.addEventListener('change', handleCurrencyChange);
    }

    // Initial load
    handleAmountChange();
  });
</script>
