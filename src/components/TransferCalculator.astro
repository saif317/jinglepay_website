---
// Component for transfer calculator UI with API integration
import 'flag-icons/css/flag-icons.min.css';
import ChevronDownIcon from '@assets/uae/chevron-down 1.svg';
import InfoIcon from '@assets/uae/info.svg';
import QRModalTriggerer from '@components/common/QRModalTriggerer.astro';

const {
  translations: { transferCalculator = {} },
  lang,
} = Astro.locals;

// Types for API
type Payment = { amount: number; currency: string };
type Transaction = Payment & { country_code: string };

type Quotation = {
  id: string;
  provider: string;
  transfer_type: string;
  transfer_fx_rate: number;
  fee: Payment;
  expire_at: Date;
  best_offer: boolean;
  receive: Transaction;
  operation: string;
  transfer_channel_name: string;
};

type RemittanceExchangeResponse = {
  id: string;
  quotation_mode: 'SEND_AMOUNT';
  send: Transaction;
  receive: Transaction;
  user_saves: Payment;
  last_updated: string;
  expired_at: string;
  fee: Payment;
  quotations: Quotation[];
};

type ExchangeRequest = {
  quotation_mode: 'SEND_AMOUNT';
  receive: {
    country_code: string;
    currency: string;
  };
  send: Transaction;
};
---

<div class='p-4 bg-gray-100 shadow-lg md:p-6 rounded-2xl w-full max-w-[484px]' id='transfer-calculator'>
  <!-- You send section -->
  <div class='mb-4 md:mb-6'>
    <label class="text-black text-sm font-normal font-['Hero_New'] leading-tight block mb-2 text-start">
      {transferCalculator.labels.youSend}
    </label>
    <div class='relative'>
      <input
        type='number'
        value='1000'
        id='send-amount'
        min='1'
        max='500000'
        step='0.01'
        class={`border-stone-300 bg-white w-full text-black text-lg md:text-xl font-normal font-['Hero_New'] leading-relaxed border rounded-lg px-3 py-3 md:py-4 pr-16 md:pr-20 focus:outline-none focus:ring-2 focus:ring-black ${lang === 'ar' ? 'text-end' : 'text-start'}`}
        aria-describedby='send-amount-error'
      />
      <div
        style='direction: ltr;'
        class='absolute flex items-center gap-1 transform -translate-y-1/2 md:gap-2 right-2 md:right-3 top-1/2'
      >
        <span class='text-lg font-normal rounded-full fi fi-ae fis md:text-xl'></span>
        <span class="text-black text-lg md:text-xl font-normal font-['Hero_New'] leading-relaxed">AED</span>
        <ChevronDownIcon class='w-4 h-4 opacity-0' />
      </div>
      <!-- Error tooltip -->
      <div
        id='send-amount-error'
        class='absolute left-0 z-10 invisible mt-1 transition-all duration-200 opacity-0 pointer-events-none top-full'
      >
        <div class='px-2 py-1 text-xs text-white bg-red-600 rounded shadow-lg whitespace-nowrap'>
          <div class='absolute w-2 h-2 transform rotate-45 bg-red-600 -top-1 left-3'></div>
          <span id='send-amount-error-text'></span>
        </div>
      </div>
    </div>
  </div>

  <!-- Recipient receives section -->
  <div class='mb-4 md:mb-6'>
    <label class="text-black text-sm font-normal font-['Hero_New'] leading-tight block mb-2 text-start">
      {transferCalculator.labels.recipientReceives}
    </label>
    <div class='relative'>
      <input
        type='number'
        value='270'
        id='receive-amount'
        readonly
        class={`border-stone-300 bg-white w-full text-black text-lg md:text-xl font-normal font-['Hero_New'] leading-relaxed border rounded-lg px-3 py-3 md:py-4 pr-20 md:pr-24 focus:outline-none focus:ring-2 focus:ring-black ${lang === 'ar' ? 'text-end' : 'text-start'}`}
      />
      <!-- Loading overlay for recipient amount -->
      <div
        id='receive-amount-loading'
        class='absolute inset-0 hidden bg-white rounded-lg bg-opacity-90'
      >
        <div class='flex items-center justify-center h-full'>
          <div class='flex items-center gap-2'>
            <div class='w-4 h-4 border-2 border-gray-300 rounded-full border-t-black animate-spin'></div>
            <span class='text-sm text-gray-600'>Calculating...</span>
          </div>
        </div>
      </div>
      <div class='absolute flex items-center gap-1 transform -translate-y-1/2 right-2 md:right-3 top-1/2'>
        <div class='relative currency-selector'>
          <button
            id='currency-button'
            type='button'
            style='direction: ltr;'
            class="bg-transparent border-none outline-none text-black text-lg md:text-xl font-normal font-['Hero_New'] leading-relaxed cursor-pointer flex items-center gap-1 pr-1 hover:text-[#794eff] transition-colors duration-200"
            aria-describedby='currency-error'
          >
            <span id='selected-currency-display'>ðŸ‡ºðŸ‡¸ USD</span>
            <ChevronDownIcon class='w-4 h-4' />
          </button>
          <div
            id='currency-dropdown'
            class='hidden max-h-[180px] overflow-y-auto absolute right-0 z-20 mt-2 min-w-[120px] bg-white rounded-lg border border-gray-200 shadow-xl p-1.5 origin-top-right focus:outline-none transform transition-all duration-200 dropdown-menu'
          >
            <div class='py-1' role='menu' aria-orientation='vertical' aria-labelledby='currency-button'>
              <!-- Currency options will be populated by JavaScript -->
            </div>
          </div>
        </div>
      </div>
      <!-- Error tooltip -->
      <div
        id='currency-error'
        class='absolute left-0 z-10 invisible mt-1 transition-all duration-200 opacity-0 pointer-events-none top-full'
      >
        <div class='px-2 py-1 text-xs text-white bg-red-600 rounded shadow-lg whitespace-nowrap'>
          <div class='absolute w-2 h-2 transform rotate-45 bg-red-600 -top-1 left-3'></div>
          <span id='currency-error-text'></span>
        </div>
      </div>
    </div>
  </div>

  <!-- Transfer details -->
  <div class='mb-4 space-y-2 md:mb-6 md:space-y-3'>
    <!-- Transfer fee -->
    <div class='flex items-center justify-between'>
      <span class="text-black text-xs md:text-sm font-normal font-['Hero_New'] leading-tight">
        {transferCalculator.labels.transferFee}:
      </span>
      <span class="text-black text-xs md:text-sm font-normal font-['Hero_New'] leading-tight" id='transfer-fee'>
        0.000 AED
      </span>
    </div>

    <!-- Exchange rate -->
    <div class='flex items-center justify-between'>
      <span class="text-black text-xs md:text-sm font-normal font-['Hero_New'] leading-tight flex-shrink-0">
        {transferCalculator.labels.exchangeRate}
      </span>
      <div class='flex items-center gap-2 text-right'>
        <!-- Exchange rate display -->
        <span class="text-black text-xs md:text-sm font-normal font-['Hero_New'] leading-tight" id='exchange-rate'>
          1.00 AED = 0.27 USD
        </span>
        <!-- Loading animation for exchange rate (inline) -->
        <div id='exchange-rate-loading' class='hidden'>
          <div class='flex items-center gap-2'>
            <div class='w-3 h-3 border-2 border-gray-300 rounded-full border-t-black animate-spin'></div>
            <span class='text-xs text-gray-600'>Loading...</span>
          </div>
        </div>
        <InfoIcon class='w-4 h-4' />
      </div>
    </div>
  </div>

  <!-- Send money button -->
  <QRModalTriggerer>
    <button
      id='send-money-btn'
      class="w-full bg-black cursor-pointer text-white text-base md:text-lg font-medium font-['Hero_New'] leading-normal py-3 md:py-4 rounded-lg hover:bg-gray-800 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-black focus:ring-offset-2 disabled:bg-gray-400 disabled:cursor-not-allowed"
    >
      <span id='btn-text'>{transferCalculator.button.sendNow}</span>
      <span id='btn-loading' class='hidden'>{transferCalculator.button.processing}</span>
    </button>
  </QRModalTriggerer>
</div>

<script>
  // Define locale strings for client-side script
  // We need to define these separately from the component import because client scripts are processed differently
  const locale = {
    errors: {
      labels: {
        youSend: 'You send:',
        recipientReceives: 'Recipient receives:',
        transferFee: 'Transfer fee',
        exchangeRate: 'Exchange rate',
      },
      button: {
        sendNow: 'Send money now',
        processing: 'Processing...',
      },
      errors: {
        requiredAmount: 'Amount is required',
        invalidNumber: 'Please enter a valid number',
        minAmount: 'Minimum amount is {{min}} AED',
        maxAmount: 'Maximum amount is {{max}} AED',
        requiredCurrency: 'Please select a currency',
        dataUnavailable: 'Currency data not available',
        noResponse: 'No response from server',
        invalidResponse: 'Invalid exchange rate data',
        noQuotations: 'No exchange rates available',
        apiError: 'Failed to get exchange rate',
      },
    },
  };

  // Mock data for currency conversion (no real API calls)
  const MOCK_CURRENCIES = {
    USD: { name: 'US Dollar', flag: 'us', rate: 0.27, country: 'United States' },
    EUR: { name: 'Euro', flag: 'eu', rate: 0.25, country: 'European Union' },
    GBP: { name: 'British Pound', flag: 'gb', rate: 0.22, country: 'United Kingdom' },
    INR: { name: 'Indian Rupee', flag: 'in', rate: 22.5, country: 'India' },
    PKR: { name: 'Pakistani Rupee', flag: 'pk', rate: 75.8, country: 'Pakistan' },
    BDT: { name: 'Bangladeshi Taka', flag: 'bd', rate: 29.2, country: 'Bangladesh' },
    PHP: { name: 'Philippine Peso', flag: 'ph', rate: 15.3, country: 'Philippines' },
    LKR: { name: 'Sri Lankan Rupee', flag: 'lk', rate: 88.5, country: 'Sri Lanka' },
    NPR: { name: 'Nepalese Rupee', flag: 'np', rate: 36.0, country: 'Nepal' },
    THB: { name: 'Thai Baht', flag: 'th', rate: 9.8, country: 'Thailand' },
  };

  // Mock currency conversion function
  function calculateMockConversion(aedAmount, targetCurrency) {
    const currency = MOCK_CURRENCIES[targetCurrency];
    if (!currency) {
      return null;
    }

    const convertedAmount = aedAmount * currency.rate;
    const fee = 0; // Transfer fee set to 0 as requested

    return {
      id: 'mock-' + Date.now(),
      quotation_mode: 'SEND_AMOUNT',
      send: {
        amount: aedAmount,
        currency: 'AED',
        country_code: 'AE',
      },
      receive: {
        amount: parseFloat(convertedAmount.toFixed(2)),
        currency: targetCurrency,
        country_code: getCountryCodeForCurrency(targetCurrency),
      },
      fee: {
        amount: parseFloat(fee.toFixed(2)),
        currency: 'AED',
      },
      transfer_fx_rate: currency.rate,
      quotations: [
        {
          id: 'mock-quotation-1',
          provider: 'JinglePay',
          transfer_type: 'BANK_TRANSFER',
          transfer_fx_rate: currency.rate,
          fee: { amount: parseFloat(fee.toFixed(2)), currency: 'AED' },
          expire_at: new Date(Date.now() + 15 * 60 * 1000), // 15 minutes from now
          best_offer: true,
          receive: {
            amount: parseFloat(convertedAmount.toFixed(2)),
            currency: targetCurrency,
            country_code: getCountryCodeForCurrency(targetCurrency),
          },
          operation: 'SEND',
          transfer_channel_name: 'Bank Transfer',
        },
      ],
      last_updated: new Date().toISOString(),
      expired_at: new Date(Date.now() + 15 * 60 * 1000).toISOString(),
    };
  }

  function getCountryCodeForCurrency(currency) {
    const currencyToCountry = {
      USD: 'US',
      EUR: 'EU',
      GBP: 'GB',
      INR: 'IN',
      PKR: 'PK',
      BDT: 'BD',
      PHP: 'PH',
      LKR: 'LK',
      NPR: 'NP',
      THB: 'TH',
    };
    return currencyToCountry[currency] || 'US';
  }

  let debounceTimer;
  let selectedCurrency = 'USD'; // Default selected currency
  let isValidating = false;

  // Mock available countries data
  const availableCountries = Object.keys(MOCK_CURRENCIES).reduce((acc, currency) => {
    const currencyData = MOCK_CURRENCIES[currency];
    acc[currency] = {
      code: getCountryCodeForCurrency(currency),
      currency: currency,
      iso2_code: getCountryCodeForCurrency(currency).toLowerCase(),
      name: currencyData.country,
      unicode: currencyData.flag,
    };
    return acc;
  }, {});

  // Function to create flag icon elements using flag-icons CSS
  function createFlagIcon(countryCode) {
    const span = document.createElement('span');
    span.className =
      'text-lg font-normal rounded-full fi fis md:text-xl rounded-full fi fi-' + countryCode.toLowerCase() + ' mr-2';

    return span;
  }

  // Validation constants
  const VALIDATION_RULES = {
    MIN_AMOUNT: 1,
    MAX_AMOUNT: 500000,
    DEBOUNCE_DELAY: 500,
  };

  // Mock currency data is already defined above

  // Validation error types (removed TypeScript interface)

  // Validation functions
  function validateSendAmount(amount) {
    if (!amount || amount.trim() === '') {
      return { field: 'send-amount', message: locale.errors.errors.requiredAmount, code: 'REQUIRED' };
    }

    const numAmount = parseFloat(amount);
    if (isNaN(numAmount)) {
      return { field: 'send-amount', message: locale.errors.errors.invalidNumber, code: 'INVALID_NUMBER' };
    }

    if (numAmount < VALIDATION_RULES.MIN_AMOUNT) {
      return {
        field: 'send-amount',
        message: locale.errors.errors.minAmount.replace('{{min}}', VALIDATION_RULES.MIN_AMOUNT.toString()),
        code: 'MIN_AMOUNT',
      };
    }

    if (numAmount > VALIDATION_RULES.MAX_AMOUNT) {
      return {
        field: 'send-amount',
        message: locale.errors.errors.maxAmount.replace('{{max}}', VALIDATION_RULES.MAX_AMOUNT.toLocaleString()),
        code: 'MAX_AMOUNT',
      };
    }

    return null;
  }

  function validateCurrency(currency) {
    if (!currency || currency.trim() === '') {
      return { field: 'receive-currency-select', message: locale.errors.errors.requiredCurrency, code: 'REQUIRED' };
    }

    // Check if currency is supported in our mock data
    if (!MOCK_CURRENCIES[currency]) {
      return {
        field: 'receive-currency-select',
        message: locale.errors.errors.dataUnavailable,
        code: 'DATA_UNAVAILABLE',
      };
    }

    return null;
  }

  function validateApiResponse(data) {
    if (!data) {
      return { field: 'api', message: locale.errors.errors.noResponse, code: 'NO_RESPONSE' };
    }

    if (!data.receive || typeof data.receive.amount !== 'number') {
      return { field: 'api', message: locale.errors.errors.invalidResponse, code: 'INVALID_RESPONSE' };
    }

    if (!data.quotations || !Array.isArray(data.quotations) || data.quotations.length === 0) {
      return { field: 'api', message: locale.errors.errors.noQuotations, code: 'NO_QUOTATIONS' };
    }

    return null;
  }

  function showError(error) {
    const fieldError = document.getElementById(`${error.field}-error`);
    const fieldErrorText = document.getElementById(`${error.field}-error-text`);
    const sendButton = document.getElementById('send-money-btn') as HTMLButtonElement;

    // Show field-specific error tooltip
    if (fieldError && fieldErrorText) {
      fieldErrorText.textContent = error.message;
      fieldError.classList.remove('opacity-0', 'invisible');
      fieldError.classList.add('opacity-100', 'visible');
    }

    // Add error styling to input
    const inputElement = document.getElementById(error.field);
    if (inputElement) {
      inputElement.classList.add('border-red-500', 'focus:ring-red-500');
      inputElement.classList.remove('border-stone-300', 'focus:ring-black');
    }

    // Disable send button
    if (sendButton) {
      sendButton.disabled = true;
    }
  }

  function clearErrors() {
    const sendButton = document.getElementById('send-money-btn') as HTMLButtonElement;

    // Clear all field error tooltips
    const errorFields = ['send-amount-error', 'currency-error'];
    errorFields.forEach((fieldId) => {
      const fieldError = document.getElementById(fieldId);
      const fieldErrorText = document.getElementById(`${fieldId}-text`);
      if (fieldError && fieldErrorText) {
        fieldError.classList.add('opacity-0', 'invisible');
        fieldError.classList.remove('opacity-100', 'visible');
        fieldErrorText.textContent = '';
      }
    });

    // Remove error styling from inputs
    const inputs = ['send-amount', 'receive-currency-select'];
    inputs.forEach((inputId) => {
      const inputElement = document.getElementById(inputId);
      if (inputElement) {
        inputElement.classList.remove('border-red-500', 'focus:ring-red-500');
        inputElement.classList.add('border-stone-300', 'focus:ring-black');
      }
    });

    // Enable send button
    if (sendButton) {
      sendButton.disabled = false;
    }
  }

  function showLoading(show) {
    const btnText = document.getElementById('btn-text');
    const btnLoading = document.getElementById('btn-loading');
    const sendButton = document.getElementById('send-money-btn');
    const receiveAmountLoading = document.getElementById('receive-amount-loading');
    const exchangeRateLoading = document.getElementById('exchange-rate-loading');

    // Control button loading state
    if (btnText && btnLoading && sendButton) {
      if (show) {
        btnText.classList.add('hidden');
        btnLoading.classList.remove('hidden');
        sendButton.disabled = true;
      } else {
        btnText.classList.remove('hidden');
        btnLoading.classList.add('hidden');
        sendButton.disabled = false;
      }
    }

    // Control recipient amount loading animation
    if (receiveAmountLoading) {
      if (show) {
        receiveAmountLoading.classList.remove('hidden');
        receiveAmountLoading.classList.add('flex');
      } else {
        receiveAmountLoading.classList.add('hidden');
        receiveAmountLoading.classList.remove('flex');
      }
    }

    // Control exchange rate loading animation
    const exchangeRateDisplay = document.getElementById('exchange-rate');
    if (exchangeRateLoading && exchangeRateDisplay) {
      if (show) {
        exchangeRateDisplay.classList.add('hidden');
        exchangeRateLoading.classList.remove('hidden');
      } else {
        exchangeRateDisplay.classList.remove('hidden');
        exchangeRateLoading.classList.add('hidden');
      }
    }
  }

  // Mock countries data for fallback (removed, using MOCK_CURRENCIES instead)

  // Mock function to populate countries (no API call)
  function initializeMockCountries() {
    console.log('Initializing mock currency data');
    populateCountryDropdown(availableCountries);
  }

  // Populate the country dropdown with mock data
  function populateCountryDropdown(countries) {
    const dropdownMenu = document.querySelector('#currency-dropdown .py-1');
    if (!dropdownMenu || !countries || typeof countries !== 'object') return;

    // Clear existing options
    dropdownMenu.innerHTML = '';

    // Iterate through countries object
    Object.values(countries).forEach((country) => {
      const currency = country.currency;
      const countryName = country.name;
      const countryCode = country.iso2_code || country.code;

      if (currency) {
        const button = document.createElement('button');
        button.type = 'button';
        button.className =
          'w-full flex items-center px-3 py-2 text-sm font-medium rounded-md transition-all duration-200 ease-in-out hover:bg-[#794eff25] hover:text-[#794eff] text-left text-gray-700';
        button.setAttribute('data-currency', currency);
        button.setAttribute('data-country-code', countryCode);
        button.setAttribute('data-country-name', countryName);
        button.setAttribute('role', 'menuitem');

        // Create flag icon using flag-icons
        const flagIcon = createFlagIcon(countryCode);
        button.appendChild(flagIcon);

        const span = document.createElement('span');
        span.className = 'flex-grow';
        span.textContent = currency;
        button.appendChild(span);

        dropdownMenu.appendChild(button);
      }
    });

    // Re-initialize dropdown event listeners for new options
    initializeCurrencyDropdownOptions();

    // Set USD as default if available
    const usdButton = dropdownMenu.querySelector('button[data-currency="USD"]');
    if (usdButton) {
      selectedCurrency = 'USD';

      // Update display with flag icon
      const displayEl = document.getElementById('selected-currency-display');
      if (displayEl) {
        // Clear existing content
        displayEl.innerHTML = '';

        // Add flag icon
        const flagIcon = createFlagIcon('US');
        displayEl.appendChild(flagIcon);

        // Add currency text
        const currencyText = document.createElement('span');
        currencyText.textContent = 'USD';
        displayEl.appendChild(currencyText);
      }

      // Mark as selected
      usdButton.classList.add('selected');
    }
  }

  // Removed duplicate createFlagIcon function - using emoji-based version instead

  // Encryption utility - inline implementation for client-side use
  async function encryptRequest(data) {
    try {
      // Import jose dynamically for client-side use
      const { CompactEncrypt, importJWK } = await import('jose');

      const PUBLIC_KEY_CONFIG = {
        kty: 'RSA',
        e: 'AQAB',
        n: 'jiIRvCBjTToaYMHTUxnKoTdKGHdtuymLWl-s3oeiZ9tWXqMeOdbiCYMSzC-N8kkpu5sdmknkVROeKKVS3OvmyxBuZ6hDfwAyfdg0t8273JX6Z7fZH6tL7T2HHJ4ItQesTuhPmJR5_oGiPO5mDjC5SUd5otrbKqUAAy9fLtT5_l91uUc27bZGvkL9Tzi9EHNeA_LgnYRNohOygirKx1G-hdGVWoisVIdiIY7Hc_XaViCCNwhiEELN4iS4MOD4Suut7Y6V5l_PmSCnUcn6-R194edIKHd7TiiFQrkNab2gb16Qdu8fCO41OdRlF_ifvWWxtqHeW3eqRdDYwaBxDvlsnQ',
      };

      const rsaPublicKey = await importJWK(PUBLIC_KEY_CONFIG, 'RSA-OAEP-256');
      const encryptedData = await new CompactEncrypt(new TextEncoder().encode(JSON.stringify(data)))
        .setProtectedHeader({
          alg: 'RSA-OAEP-256',
          enc: 'A256CBC-HS512',
          typ: 'JWE',
        })
        .encrypt(rsaPublicKey);

      return encryptedData;
    } catch (error) {
      console.error('Encryption error:', error);
      throw error;
    }
  }

  async function fetchExchangeRate(sendAmount) {
    try {
      // Validate input before making API call
      const amountError = validateSendAmount(sendAmount);
      if (amountError) {
        throw new Error(amountError.message);
      }

      // Use global selectedCurrency variable (no need to get from DOM)
      const currencyError = validateCurrency(selectedCurrency);
      if (currencyError) {
        throw new Error(currencyError.message);
      }

      // Find country code for selected currency
      let countryCode = 'US'; // default
      for (const [code, country] of Object.entries(availableCountries)) {
        const countryInfo = country;
        if (countryInfo.currency === selectedCurrency) {
          countryCode = countryInfo.iso2_code || code;
          break;
        }
      }

      const sendAmountNum = parseFloat(sendAmount);
      const requestData = {
        quotation_mode: 'SEND_AMOUNT',
        receive: {
          country_code: countryCode,
          currency: selectedCurrency,
        },
        send: {
          amount: sendAmountNum,
          currency: 'AED',
          country_code: 'AE',
        },
      };

      // Simulate API delay for realistic loading experience
      await new Promise((resolve) => setTimeout(resolve, 800 + Math.random() * 400)); // 800-1200ms delay

      // Use mock conversion instead of API call
      const mockData = calculateMockConversion(sendAmountNum, selectedCurrency);
      if (mockData) {
        return mockData;
      }

      // Fallback if mock conversion fails
      throw new Error('Currency not supported');
    } catch (error) {
      console.error('Error in mock conversion:', error);
      // Fallback mock data
      const sendAmountNum = parseFloat(sendAmount) || 1000;
      const fallbackRate = 0.27; // USD rate as fallback
      const receiveAmountNum = sendAmountNum * fallbackRate;

      return {
        id: 'mock-fallback-' + Date.now(),
        quotation_mode: 'SEND_AMOUNT',
        send: {
          amount: sendAmountNum,
          currency: 'AED',
          country_code: 'AE',
        },
        receive: {
          amount: parseFloat(receiveAmountNum.toFixed(2)),
          currency: selectedCurrency || 'USD',
          country_code: getCountryCodeForCurrency(selectedCurrency || 'USD'),
        },
        user_saves: {
          amount: 0,
          currency: 'AED',
        },
        last_updated: new Date().toISOString(),
        expired_at: new Date(Date.now() + 300000).toISOString(),
        fee: {
          amount: 2.99,
          currency: 'AED',
        },
        quotations: [
          {
            id: 'mock-fallback-quotation-' + Date.now(),
            provider: 'JinglePay',
            transfer_type: 'BANK_TRANSFER',
            transfer_fx_rate: fallbackRate,
            fee: {
              amount: 2.99,
              currency: 'AED',
            },
            expire_at: new Date(Date.now() + 300000),
            best_offer: true,
            receive: {
              amount: parseFloat(receiveAmountNum.toFixed(2)),
              currency: selectedCurrency || 'USD',
              country_code: getCountryCodeForCurrency(selectedCurrency || 'USD'),
            },
            operation: 'SEND',
            transfer_channel_name: 'Bank Transfer',
          },
        ],
      };
    }
  }

  function updateCalculator(data) {
    const receiveAmountEl = document.getElementById('receive-amount');
    const transferFeeEl = document.getElementById('transfer-fee');
    const exchangeRateEl = document.getElementById('exchange-rate');

    if (receiveAmountEl && data.receive) {
      receiveAmountEl.value = data.receive.amount.toFixed(2);
    }

    if (transferFeeEl && data.fee) {
      transferFeeEl.textContent = `${data.fee.amount.toFixed(3)} ${data.fee.currency || 'AED'}`;
    }

    if (exchangeRateEl && data.quotations && data.quotations.length > 0) {
      const rate = data.quotations[0].transfer_fx_rate;
      // Use the global selectedCurrency variable instead of trying to get from DOM
      exchangeRateEl.textContent = `1.00 AED = ${rate.toFixed(2)} ${selectedCurrency}`;
    }
  }

  function handleAmountChange() {
    const sendAmountEl = document.getElementById('send-amount') as HTMLInputElement;
    const amount = sendAmountEl?.value || '1000';

    // Clear previous errors
    clearErrors();

    // Validate amount immediately for user feedback
    const amountError = validateSendAmount(amount);
    if (amountError) {
      showError(amountError);
      return;
    }

    // Prevent multiple simultaneous validations
    if (isValidating) {
      return;
    }

    // Debounce API calls
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(async () => {
      try {
        isValidating = true;
        showLoading(true);
        const data = await fetchExchangeRate(amount);
        updateCalculator(data);
        clearErrors(); // Clear any previous errors on success
      } catch (error) {
        console.error('Exchange rate fetch error:', error);
        showError({
          field: 'api',
          message: error instanceof Error ? error.message : 'Failed to get exchange rate',
          code: 'API_ERROR',
        });
      } finally {
        isValidating = false;
        showLoading(false);
      }
    }, VALIDATION_RULES.DEBOUNCE_DELAY);
  }

  // Currency dropdown functionality (selectedCurrency already declared above)

  // Initialize event listeners for currency dropdown options
  function initializeCurrencyDropdownOptions() {
    const currencyOptions = document.querySelectorAll('[data-currency]');
    const currencyDropdown = document.getElementById('currency-dropdown');

    // Handle currency selection
    function selectCurrency(currency, countryCode) {
      selectedCurrency = currency;

      // Update display with flag icon
      const displayEl = document.getElementById('selected-currency-display');
      if (displayEl) {
        // Clear existing content
        displayEl.innerHTML = '';

        // Add flag icon
        const flagIcon = createFlagIcon(countryCode);
        displayEl.appendChild(flagIcon);

        // Add currency text
        const currencyText = document.createElement('span');
        currencyText.textContent = currency;
        displayEl.appendChild(currencyText);
      }

      // Update selected state in dropdown
      currencyOptions.forEach((option) => {
        option.classList.remove('selected');
        if (option.getAttribute('data-currency') === currency) {
          option.classList.add('selected');
        }
      });

      // Close dropdown
      currencyDropdown?.classList.add('hidden');

      // Trigger currency change handler
      handleCurrencyChange();
    }

    // Handle currency change - trigger conversion calculation
    function handleCurrencyChange() {
      const sendAmountEl = document.getElementById('send-amount');
      if (sendAmountEl && sendAmountEl.value && sendAmountEl.value.trim() !== '') {
        // Trigger conversion with current amount and new currency
        const amount = sendAmountEl.value;

        // Clear timeout and trigger immediate conversion
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(async () => {
          try {
            isValidating = true;
            showLoading(true);
            const data = await fetchExchangeRate(amount);
            updateCalculator(data);
            clearErrors();
          } catch (error) {
            console.error('Currency change conversion error:', error);
            showError({
              field: 'api',
              message: locale.errors.errors.apiError,
              code: 'API_ERROR',
            });
          } finally {
            isValidating = false;
            showLoading(false);
          }
        }, 100); // Short delay for currency change
      }
    }

    // Add click listeners to all currency options
    currencyOptions.forEach((option) => {
      // Remove any existing listeners to avoid duplicates
      const newOption = option.cloneNode(true) as Element;
      option.parentNode?.replaceChild(newOption, option);

      newOption.addEventListener('click', (e) => {
        e.preventDefault();
        const currency = newOption.getAttribute('data-currency') || 'USD';
        const countryCode = newOption.getAttribute('data-country-code') || 'US';
        selectCurrency(currency, countryCode);
      });
    });
  }

  function initializeCurrencyDropdown() {
    const currencyButton = document.getElementById('currency-button');
    const currencyDropdown = document.getElementById('currency-dropdown');

    // Toggle dropdown
    function toggleCurrencyDropdown(e) {
      e.stopPropagation();
      e.preventDefault();
      currencyDropdown?.classList.toggle('hidden');
    }

    // Add event listeners
    if (currencyButton) {
      currencyButton.addEventListener('click', toggleCurrencyDropdown);
      currencyButton.addEventListener('touchend', toggleCurrencyDropdown);
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target;
      if (!target.closest('.currency-selector')) {
        currencyDropdown?.classList.add('hidden');
      }
    });

    // Initialize options if they exist
    initializeCurrencyDropdownOptions();
  }

  // Updated handleCurrencyChange to work with custom dropdown
  function handleCurrencyChange() {
    const sendAmountEl = document.getElementById('send-amount') as HTMLInputElement;
    const amount = sendAmountEl?.value || '1000';
    const currency = selectedCurrency;

    // Clear previous errors
    clearErrors();

    // Validate currency selection
    const currencyError = validateCurrency(currency);
    if (currencyError) {
      showError(currencyError);
      return;
    }

    // Validate amount as well
    const amountError = validateSendAmount(amount);
    if (amountError) {
      showError(amountError);
      return;
    }

    // Prevent multiple simultaneous validations
    if (isValidating) {
      return;
    }

    // Update exchange rate when currency changes
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(async () => {
      try {
        isValidating = true;
        showLoading(true);
        const data = await fetchExchangeRate(amount);
        updateCalculator(data);
        clearErrors(); // Clear any previous errors on success
      } catch (error) {
        console.error('Exchange rate fetch error:', error);
        showError({
          field: 'api',
          message: error instanceof Error ? error.message : 'Failed to get exchange rate',
          code: 'API_ERROR',
        });
      } finally {
        isValidating = false;
        showLoading(false);
      }
    }, 300);
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize mock countries instead of fetching from API
    initializeMockCountries();

    // Initialize currency dropdown
    initializeCurrencyDropdown();

    const sendAmountEl = document.getElementById('send-amount');

    if (sendAmountEl) {
      // Input validation is handled in the comprehensive event listeners below

      // Add blur validation for immediate feedback
      sendAmountEl.addEventListener('blur', () => {
        const amount = sendAmountEl.value;
        const amountError = validateSendAmount(amount);
        if (amountError) {
          showError(amountError);
        } else {
          clearErrors();
        }
      });

      // Prevent invalid characters and enforce proper number format
      sendAmountEl.addEventListener('keydown', (e) => {
        const input = e.target;
        const currentValue = input.value;
        const key = e.key;

        // Allow control keys
        if (['Backspace', 'Delete', 'Tab', 'Enter', 'ArrowLeft', 'ArrowRight', 'Home', 'End'].includes(key)) {
          return;
        }

        // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
        if (e.ctrlKey && ['a', 'c', 'v', 'x'].includes(key.toLowerCase())) {
          return;
        }

        // Prevent non-numeric characters except decimal point
        if (!/[0-9.]/.test(key)) {
          e.preventDefault();
          return;
        }

        // Prevent multiple decimal points
        if (key === '.' && currentValue.includes('.')) {
          e.preventDefault();
          return;
        }

        // Prevent leading zeros (except for 0.)
        if (key === '0' && currentValue === '' && input.selectionStart === 0) {
          // Allow 0 only if next character will be a decimal point
          return;
        }

        // Prevent more than 2 decimal places
        if (currentValue.includes('.')) {
          const decimalIndex = currentValue.indexOf('.');
          const afterDecimal = currentValue.substring(decimalIndex + 1);
          if (afterDecimal.length >= 2 && input.selectionStart > decimalIndex) {
            e.preventDefault();
            return;
          }
        }

        // Prevent numbers larger than max amount
        const newValue = currentValue.slice(0, input.selectionStart) + key + currentValue.slice(input.selectionEnd);
        const numValue = parseFloat(newValue);
        if (!isNaN(numValue) && numValue > VALIDATION_RULES.MAX_AMOUNT) {
          e.preventDefault();
          return;
        }
      });

      // Handle paste events
      sendAmountEl.addEventListener('paste', (e) => {
        e.preventDefault();
        const paste = (e.clipboardData || window.clipboardData).getData('text');
        const input = e.target;

        // Clean the pasted text
        const cleanedPaste = paste.replace(/[^0-9.]/g, '');

        // Check for multiple decimal points
        const decimalCount = (cleanedPaste.match(/\./g) || []).length;
        if (decimalCount > 1) {
          return; // Reject paste with multiple decimals
        }

        // Limit to 2 decimal places
        let finalValue = cleanedPaste;
        if (cleanedPaste.includes('.')) {
          const parts = cleanedPaste.split('.');
          if (parts[1].length > 2) {
            finalValue = parts[0] + '.' + parts[1].substring(0, 2);
          }
        }

        // Check if the value is within range
        const numValue = parseFloat(finalValue);
        if (!isNaN(numValue) && numValue >= VALIDATION_RULES.MIN_AMOUNT && numValue <= VALIDATION_RULES.MAX_AMOUNT) {
          input.value = finalValue;
          // Trigger input event to update calculations
          input.dispatchEvent(new Event('input', { bubbles: true }));
        }
      });

      // Additional input validation to clean up any invalid values
      sendAmountEl.addEventListener('input', (e) => {
        const input = e.target;
        let value = input.value;

        // Remove any non-numeric characters except decimal point
        value = value.replace(/[^0-9.]/g, '');

        // Handle multiple decimal points
        const decimalIndex = value.indexOf('.');
        if (decimalIndex !== -1) {
          const beforeDecimal = value.substring(0, decimalIndex);
          const afterDecimal = value.substring(decimalIndex + 1).replace(/\./g, '');
          value = beforeDecimal + '.' + afterDecimal.substring(0, 2); // Limit to 2 decimal places
        }

        // Remove leading zeros (except for 0. cases)
        if (value.length > 1 && value[0] === '0' && value[1] !== '.') {
          value = value.replace(/^0+/, '');
          if (value === '') value = '0';
        }

        // Update input value if it was cleaned
        if (input.value !== value) {
          input.value = value;
        }

        // Call the original handler
        handleAmountChange();
      });

      // Remove the original input event listener since we're handling it above
      // sendAmountEl.addEventListener('input', handleAmountChange);
    }

    // Initial load with validation
    setTimeout(() => {
      handleAmountChange();
    }, 100); // Small delay to ensure DOM is fully ready
  });

  // Add validation on form submission (if integrated with a form)
  function validateForm(): boolean {
    const sendAmountEl = document.getElementById('send-amount') as HTMLInputElement;

    const amount = sendAmountEl?.value || '';
    const currency = selectedCurrency || '';

    const amountError = validateSendAmount(amount);
    const currencyError = validateCurrency(currency);

    if (amountError) {
      showError(amountError);
      return false;
    }

    if (currencyError) {
      showError(currencyError);
      return false;
    }

    clearErrors();
    return true;
  }

  // Expose validation function globally for potential external use
  (window as any).transferCalculatorValidation = {
    validateForm,
    validateSendAmount,
    validateCurrency,
    clearErrors,
    showError,
  };

  // Set correct store URL for download link inside mobile menu
  const downloadLink = document.getElementById('send-money-btn') as HTMLButtonElement | null;
  if (downloadLink) {
    const ua = navigator.userAgent;
    const isIOS = /iPhone|iPad|iPod/i.test(ua);
    downloadLink.onclick = () => {
      if (isIOS) {
        window.open('https://apps.apple.com/pl/app/jingle-pay/id1493392189', '_blank');
      } else {
        window.open('https://play.google.com/store/apps/details?id=com.jinglepay&hl=en', '_blank');
      }
    };
  }
</script>

<style>
  /* Hide spinner controls for number inputs */
  input[type='number']::-webkit-outer-spin-button,
  input[type='number']::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  /* Firefox */
  input[type='number'] {
    -moz-appearance: textfield;
  }

  /* Currency selector dropdown styling */
  .currency-selector {
    position: relative;
  }

  /* Animation for dropdown */
  #currency-dropdown:not(.hidden) {
    animation: dropdown-open 0.2s ease-out forwards;
  }

  @keyframes dropdown-open {
    0% {
      opacity: 0;
      transform: translateY(-5px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Add hover effects to dropdown items */
  .currency-selector .dropdown-menu button:hover {
    background-color: rgba(121, 78, 255, 0.1);
    color: #794eff;
  }

  /* Selected state styling */
  .currency-selector .dropdown-menu button.selected {
    background-color: rgba(121, 78, 255, 0.3);
    color: #794eff;
    font-weight: 600;
  }
</style>
