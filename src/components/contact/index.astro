---
import SuccessModal from '@components/contact/SuccessModal.astro';

const formEndpoint = 'https://usebasin.com/f/c6eae2f970e6';

const {
  translations: { contact = {} },
} = Astro.locals;

// Prepare translations for client-side script
const clientTranslations = {
  reasonPlaceholder: contact.reasonPlaceholder || 'Select an option',
  validationRequired: contact.validationRequired || 'This field is required.',
  validationEmail: contact.validationEmail || 'Please enter a valid email address.',
  validationPhone: contact.validationPhone || 'Please enter a valid phone number.',
  validationMinLength: contact.validationMinLength || 'Minimum {num} characters required.',
  validationMaxLength: contact.validationMaxLength || 'Maximum {num} characters allowed.',
  validationNameFormat: contact.validationNameFormat || 'Only letters and spaces are allowed.',
  validationNameLength: contact.validationNameLength || 'Name must be at least 2 characters.',
  validationPhonePakistan: contact.validationPhonePakistan || 'Please enter a valid Pakistani phone number (e.g., +923XXXXXXXXX or 03XXXXXXXXX).',
  validationPhoneUAE: contact.validationPhoneUAE || 'Please enter a valid UAE phone number (e.g., +9715XXXXXXXX or 05XXXXXXXX).',
  submitting: contact.submitting || 'Submitting...',
  submitButton: contact.submitButton || 'Submit',
  errorOops: contact.errorOops || 'Oops! Something went wrong. Please try again later.',
  errorNetwork: contact.errorNetwork || 'Could not reach server. Please check your connection.',
  errorCorrect: contact.errorCorrect || 'Please correct the errors above.',
  // These translations will be passed to the client-side script
};
---

<section
  id='contact-us'
  class='flex flex-col lg:flex-row lg:justify-between gap-y-10 lg:gap-x-[50px] xl:gap-x-[75px] 2xl:gap-x-[100px] px-4 sm:px-8 pt-32 pb-[109px]'
  aria-labelledby='contact-heading'
>
  <div class='flex flex-col gap-y-10'>
    <h2 id='contact-heading' class='mb-3 text-4xl font-extrabold'>{contact.title}</h2>
    <p class='text-lg'>{contact.description}</p>
    <div
      class='p-5 lg:p-6 rounded-[20px] bg-violet-500/3 outline-[0.50px] outline-offset-[-0.50px] outline-violet-500/40 backdrop-blur-sm'
    >
      <p class='mb-6 text-lg text-neutral-900'>{contact.emailUs}</p>
      <a
        href='mailto:support@jinglepay.com'
        class='text-[#794EFF] text-xl transition duration-150 ease-in-out hover:text-violet-900 hover:underline'
      >
        support@jinglepay.com
      </a>
    </div>
  </div>

  <div class='relative p-5 lg:p-8 bg-white rounded-[20px] shadow-[0px_0px_60px_0px_rgba(121,78,255,0.12)] w-full'>
    <h3 class='mb-8 text-2xl font-extrabold text-slate-800'>{contact.formTitle}</h3>

    <form id='contact-form' action={formEndpoint} method='POST' class='grid grid-cols-1 gap-4 lg:grid-cols-2' novalidate>
      <div>
        <label for='first-name' class='block mb-1.5 text-base font-semibold'>
          {contact.firstName}<span class='text-red-500'>*</span>
        </label>
        <input
          type='text'
          id='first-name'
          name='firstName'
          placeholder={contact.firstName}
          required
          autocomplete='given-name'
          aria-required='true'
          aria-invalid='false'
          aria-describedby='first-name-error'
          maxlength='50'
          class='w-full p-4 placeholder-[#797C8890] transition duration-150 ease-in-out rounded-lg shadow-sm outline outline-neutral-300 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-transparent'
        />
        <div id='first-name-error' class='text-red-500 text-sm mt-1 min-h-[1rem]' aria-live='polite'></div>
      </div>

      <div>
        <label for='last-name' class='block mb-1.5 text-base font-semibold'
          >{contact.lastName}<span class='text-red-500'>*</span></label
        >
        <input
          type='text'
          id='last-name'
          name='lastName'
          placeholder={contact.lastName}
          required
          autocomplete='family-name'
          aria-required='true'
          aria-invalid='false'
          aria-describedby='last-name-error'
          maxlength='50'
          class='w-full p-4 placeholder-[#797C8890] transition duration-150 ease-in-out rounded-lg shadow-sm outline outline-neutral-300 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-transparent'
        />
        <div id='last-name-error' class='text-red-500 text-sm mt-1 min-h-[1rem]' aria-live='polite'></div>
      </div>

      <div>
        <label for='email' class='block mb-1.5 text-base font-semibold'
          >{contact.email}<span class='text-red-500'>*</span></label
        >
        <input
          type='email'
          id='email'
          name='email'
          placeholder='example@company.com'
          required
          autocomplete='email'
          aria-required='true'
          aria-invalid='false'
          aria-describedby='email-error'
          class='w-full p-4 placeholder-[#797C8890] transition duration-150 ease-in-out rounded-lg shadow-sm outline outline-neutral-300 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-transparent'
        />
        <div id='email-error' class='text-red-500 text-sm mt-1 min-h-[1rem]' aria-live='polite'></div>
      </div>

      <div>
        <label for='phone' class='block mb-1.5 text-base font-semibold'>{contact.phone}</label>
        <input
          type='tel'
          id='phone'
          name='phone'
          placeholder='+92 311 2222222'
          autocomplete='tel'
          aria-invalid='false'
          aria-describedby='phone-error'
          maxlength='20'
          class='w-full p-4 placeholder-[#797C8890] transition duration-150 ease-in-out rounded-lg shadow-sm outline outline-neutral-300 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-transparent'
        />
        <div id='phone-error' class='text-red-500 text-sm mt-1 min-h-[1rem]' aria-live='polite'></div>
      </div>

      <div class='lg:col-span-2'>
        <label for='reason' class='block mb-1.5 text-base font-semibold'
          >{contact.reason}<span class='text-red-500'>*</span></label
        >
        <div class='relative' id='reason-dropdown'>
          <input type='hidden' id='reason' name='reason' value='' required aria-required='true' aria-invalid='false' aria-describedby='reason-error' />
          <button
            type='button'
            id='reason-button'
            aria-haspopup='listbox'
            aria-expanded='false'
            class='relative w-full p-4 pr-10 text-left bg-white rounded-lg shadow-sm cursor-default outline outline-neutral-300 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-transparent'
          >
            <span class='block truncate placeholder-text' id='reason-selected-text' data-placeholder={contact.reasonPlaceholder}>{contact.reasonPlaceholder}</span>
            <span class='absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none'>
              <svg
                class='w-5 h-5 text-gray-400'
                xmlns='http://www.w3.org/2000/svg'
                viewBox='0 0 20 20'
                fill='currentColor'
                aria-hidden='true'
              >
                <path
                  fill-rule='evenodd'
                  d='M10 3a.75.75 0 01.53.22l3.5 3.5a.75.75 0 01-1.06 1.06L10 4.81 6.03 8.78a.75.75 0 01-1.06-1.06l3.5-3.5A.75.75 0 0110 3zm-3.78 9.53a.75.75 0 011.06 0L10 15.19l3.97-3.97a.75.75 0 111.06 1.06l-4.5 4.5a.75.75 0 01-1.06 0l-4.5-4.5a.75.75 0 010-1.06z'
                  clip-rule='evenodd'></path>
              </svg>
            </span>
          </button>
          <ul
            id='reason-options'
            class='absolute z-10 hidden w-full py-1 mt-1 overflow-auto text-base bg-white rounded-md shadow-lg max-h-60 sm:text-sm'
            tabindex='-1'
            role='listbox'
            aria-labelledby='reason-button'
          >
            <li
              class='relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9 hover:bg-violet-100'
              id='reason-option-jinglepay_questions'
              role='option'
              data-value='jinglepay_questions'
            >
              <span class='block truncate'>{contact.reasons[0]}</span>
            </li>
            <li
              class='relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9 hover:bg-violet-100'
              id='reason-option-technical_support'
              role='option'
              data-value='technical_support'
            >
              <span class='block truncate'>{contact.reasons[1]}</span>
            </li>
            <li
              class='relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9 hover:bg-violet-100'
              id='reason-option-billing'
              role='option'
              data-value='billing'
            >
              <span class='block truncate'>{contact.reasons[2]}</span>
            </li>
            <li
              class='relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9 hover:bg-violet-100'
              id='reason-option-feedback'
              role='option'
              data-value='feedback'
            >
              <span class='block truncate'>{contact.reasons[3]}</span>
            </li>
            <li
              class='relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9 hover:bg-violet-100'
              id='reason-option-general'
              role='option'
              data-value='general'
            >
              <span class='block truncate'>{contact.reasons[4]}</span>
            </li>
          </ul>
        </div>
      </div>

      <div class='lg:col-span-2'>
        <label for='message' class='block mb-1.5 text-base font-semibold'
          >{contact.message}<span class='text-red-500'>*</span></label
        >
        <textarea
          id='message'
          name='message'
          rows='4'
          placeholder={contact.messagePlaceholder}
          required
          aria-required='true'
          aria-invalid='false'
          aria-describedby='message-error'
          minlength='10'
          maxlength='1000'
          class='w-full p-4 placeholder-[#797C8890] transition duration-150 ease-in-out rounded-lg shadow-sm outline outline-neutral-300 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-transparent'
        ></textarea>
        <div id='message-error' class='text-red-500 text-sm mt-1 min-h-[1rem]' aria-live='polite'></div>
        <div class='text-xs text-gray-500 mt-1 text-right pr-1'><span id='message-char-count'>0</span> / 1000</div>
      </div>

      <div class='lg:col-span-2'>
        <div class='opacity-0 absolute left-[-5000px]' aria-hidden='true'>
          <input type='text' id='form-honeypot' name='form-honeypot' tabindex='-1' autocomplete='off' />
        </div>
        
        <button
          type='submit'
          id='submit-button'
          class='w-full p-4 text-lg font-semibold text-white bg-violet-600 rounded-lg shadow-md hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:ring-offset-2 transition duration-150 ease-in-out disabled:opacity-50 flex items-center justify-center'
        >
          <svg class='animate-spin -ml-1 mr-3 h-5 w-5 text-white hidden' id='submit-spinner' xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24'>
            <circle class='opacity-25' cx='12' cy='12' r='10' stroke='currentColor' stroke-width='4'></circle>
            <path class='opacity-75' fill='currentColor' d='M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'></path>
          </svg>
          <span id='submit-button-text'>{contact.submitButton}</span>
        </button>
        <p id='form-status' class='mt-4 text-sm text-center' aria-live='polite'></p>
      </div>
    </form>
  </div>
</section>

<SuccessModal id='success-modal' />

<style>
  .placeholder-text {
    color: #797c8890;
  }
  /* Ensure error divs with fixed height don't cause large gaps when empty */
  [id$='-error']:empty {
    /* display: none; /* JS will handle display block/none */
  }
  .min-h-\[1rem\] { min-height: 1rem; } /* Ensure error message divs maintain height */
</style>

<script define:vars={{ clientTranslations }} is:inline>
  // DOM elements
  const form = document.getElementById('contact-form');
  const successModal = document.getElementById('success-modal');
  const modalConfirmButton = successModal.querySelector('button');
  const submitButton = document.getElementById('submit-button');
  const formStatus = document.getElementById('form-status');
  const firstNameInput = document.getElementById('first-name');
  const lastNameInput = document.getElementById('last-name');
  const emailInput = document.getElementById('email');
  const phoneInput = document.getElementById('phone');
  const region = window.location.pathname.split('/')[1];
  if (phoneInput) {
    phoneInput.placeholder = region === 'pak' ? '+92 311 2222222' : '+971 55 1234567';
  }
  const reasonHiddenInput = document.getElementById('reason');
  const messageTextarea = document.getElementById('message');
  const reasonButton = document.getElementById('reason-button');
  const reasonOptions = document.getElementById('reason-options');
  const messageCharCount = document.getElementById('message-char-count');
  const reasonSelectedText = document.getElementById('reason-selected-text');

  // Form validation helpers
  const errorElements = {};
  const submitSpinner = document.getElementById('submit-spinner');
  const submitButtonText = document.getElementById('submit-button-text');
  const formHoneypot = document.getElementById('form-honeypot');
  
  // Get error elements for each input
  const formFields = ['first-name', 'last-name', 'email', 'phone', 'reason', 'message'];
  formFields.forEach(field => {
    errorElements[field] = document.getElementById(`${field}-error`);
  });
  
  // Validation functions
  const validators = {
    // Check if field has a value
    required: (value) => {
      return value.trim() !== '';
    },
    // Check if name has only alphabetic characters and spaces
    nameFormat: (value) => {
      return /^[A-Za-z\s]+$/.test(value);
    },
    // Check if name has at least 2 characters
    nameMinLength: (value) => {
      return value.trim().length >= 2;
    },
    // Check if email is valid with proper format (example@domain.com)
    email: (value) => {
      return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/i.test(value);
    },
    // Check if phone is valid format depending on region (Pakistan or UAE)
    phone: (value) => {
      if (value.trim() === '') return true; // Phone is optional
      const cleanNumber = value.replace(/\s+/g, '');
      if (region === 'pak') {
        return /^(\+923|03)\d{9}$/.test(cleanNumber);
      }
      return /^(\+971|0)5\d{8}$/.test(cleanNumber);
    },
    // Check if text is at least minLength characters
    minLength: (value, minLength) => {
      return value.trim().length >= minLength;
    },
    // Check if text is at most maxLength characters
    maxLength: (value, maxLength) => {
      return value.trim().length <= maxLength;
    }
  };
  
  // Set field validity and error message
  function setFieldValidity(field, valid, message = '') {
    const input = document.getElementById(field);
    const errorElement = errorElements[field];
    
    if (input && errorElement) {
      input.setAttribute('aria-invalid', !valid);
      errorElement.textContent = valid ? '' : message;
      
      if (!valid) {
        input.classList.add('border-red-500');
        errorElement.classList.remove('hidden');
      } else {
        input.classList.remove('border-red-500');
        errorElement.classList.add('hidden');
      }
    }
  }
  
  // Validate field and show error if invalid
  function validateField(field) {
    const input = document.getElementById(field);
    if (!input) return true;
    
    const value = input.value;
    let isValid = true;
    let errorMessage = '';
    
    // Required field validation
    if (input.hasAttribute('required') && !validators.required(value)) {
      isValid = false;
      errorMessage = clientTranslations.validationRequired;
    } 
    // First name and last name validation
    else if ((field === 'first-name' || field === 'last-name') && value.trim()) {
      // Check minimum length of 2 characters
      if (!validators.nameMinLength(value)) {
        isValid = false;
        errorMessage = clientTranslations.validationNameLength;
      } 
      // Check for alphabetic characters and spaces only
      else if (!validators.nameFormat(value)) {
        isValid = false;
        errorMessage = clientTranslations.validationNameFormat;
      }
    } 
    // Email validation with proper format
    else if (field === 'email' && value.trim() && !validators.email(value)) {
      isValid = false;
      errorMessage = clientTranslations.validationEmail;
    } 
    // Pakistani phone number validation
    else if (field === 'phone' && value.trim() && !validators.phone(value)) {
      isValid = false;
      errorMessage = region === 'pak' ? clientTranslations.validationPhonePakistan : clientTranslations.validationPhoneUAE;
    }
    // Message minimum length validation (10 characters)
    else if (field === 'message' && !validators.minLength(value, 10)) {
      isValid = false;
      errorMessage = clientTranslations.validationMinLength.replace('{num}', '10');
    }
    // Max length validation
    else if (input.hasAttribute('maxlength') && !validators.maxLength(value, parseInt(input.getAttribute('maxlength')))) {
      isValid = false;
      errorMessage = clientTranslations.validationMaxLength.replace('{num}', input.getAttribute('maxlength'));
    }
    
    setFieldValidity(field, isValid, errorMessage);
    return isValid;
  }
  
  // Validate all fields
  function validateForm() {
    let isValid = true;
    
    // Validate each input
    formFields.forEach(field => {
      if (!validateField(field)) {
        isValid = false;
      }
    });
    
    return isValid;
  }
  
  // Character counter for message
  if (messageTextarea && messageCharCount) {
    messageTextarea.addEventListener('input', () => {
      const count = messageTextarea.value.length;
      messageCharCount.textContent = count;
      
      // Update message validation
      validateField('message');
    });
  }
  
  // Setup keyboard navigation and accessibility for dropdown
  if (reasonButton && reasonOptions && reasonHiddenInput && reasonSelectedText) {
    // Initialize dropdown
    reasonSelectedText.textContent = reasonSelectedText.textContent.trim() || clientTranslations.reasonPlaceholder;
    reasonSelectedText.classList.add('placeholder-text');
    
    // Toggle dropdown
    reasonButton.addEventListener('click', () => {
      const isExpanded = reasonButton.getAttribute('aria-expanded') === 'true';
      reasonButton.setAttribute('aria-expanded', !isExpanded);
      reasonOptions.classList.toggle('hidden');
      
      // Focus first item when opening
      if (!isExpanded) {
        const firstItem = reasonOptions.querySelector('li');
        if (firstItem) firstItem.focus();
      }
    });

    // Handle option selection
    reasonOptions.addEventListener('click', (event) => {
      let targetElement = event.target;
      // Traverse up the DOM tree until a list item (li) with data-value is found
      while (targetElement && targetElement.tagName !== 'LI' && !targetElement.hasAttribute('data-value')) {
        targetElement = targetElement.parentElement;
      }

      if (targetElement && targetElement.hasAttribute('data-value')) {
        const selectedValue = targetElement.getAttribute('data-value');
        const selectedText = targetElement.querySelector('.truncate').textContent;

        reasonHiddenInput.value = selectedValue;
        reasonSelectedText.textContent = selectedText;
        reasonSelectedText.classList.remove('placeholder-text');
        
        // Update validity
        validateField('reason');

        reasonButton.setAttribute('aria-expanded', 'false');
        reasonOptions.classList.add('hidden');
        reasonButton.focus();

        // Visual indication for selected item
        reasonOptions.querySelectorAll('li').forEach((li) => li.classList.remove('bg-violet-200'));
        targetElement.classList.add('bg-violet-200');
      }
    });
    
    // Keyboard navigation for dropdown
    reasonOptions.addEventListener('keydown', (event) => {
      const items = Array.from(reasonOptions.querySelectorAll('li[role="option"]'));
      const currentIndex = items.findIndex(item => document.activeElement === item);
      
      switch (event.key) {
        case 'ArrowDown':
          event.preventDefault();
          if (currentIndex < items.length - 1) {
            items[currentIndex + 1].focus();
          }
          break;
        case 'ArrowUp':
          event.preventDefault();
          if (currentIndex > 0) {
            items[currentIndex - 1].focus();
          } else {
            reasonButton.focus();
          }
          break;
        case 'Enter':
        case ' ':
          event.preventDefault();
          if (document.activeElement.hasAttribute('data-value')) {
            document.activeElement.click();
          }
          break;
        case 'Escape':
          event.preventDefault();
          reasonButton.setAttribute('aria-expanded', 'false');
          reasonOptions.classList.add('hidden');
          reasonButton.focus();
          break;
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (event) => {
      const reasonDropdown = document.getElementById('reason-dropdown');
      if (reasonDropdown && !reasonDropdown.contains(event.target)) {
        reasonButton.setAttribute('aria-expanded', 'false');
        reasonOptions.classList.add('hidden');
      }
    });
    
    // Make options focusable
    reasonOptions.querySelectorAll('li[role="option"]').forEach(option => {
      option.setAttribute('tabindex', '0');
    });
  }

  // Add input event listeners for real-time validation
  formFields.forEach(field => {
    const input = document.getElementById(field);
    if (input) {
      input.addEventListener('blur', () => {
        validateField(field);
      });
      
      if (field !== 'message') { // Message has its own input handler for character counting
        input.addEventListener('input', () => {
          validateField(field);
        });
      }
    }
  });

  // Enhanced Form Submission Logic with validation and honeypot
  if (form && successModal && modalConfirmButton && submitButton && formStatus) {
    form.addEventListener('submit', async (event) => {
      event.preventDefault();
      
      // Check if the honeypot field is empty (not filled by bots)
      if (formHoneypot && formHoneypot.value !== '') {
        console.log('Honeypot detection triggered');
        return false; // Silently reject the submission
      }
      
      // Validate all form fields before submission
      const isValid = validateForm();
      
      if (!isValid) {
        formStatus.textContent = clientTranslations.errorCorrect;
        formStatus.classList.add('text-red-500');
        
        // Find the first invalid field and focus it
        for (const field of formFields) {
          const input = document.getElementById(field);
          if (input && input.getAttribute('aria-invalid') === 'true') {
            input.focus();
            break;
          }
        }
        
        return false;
      }
      
      // Disable the button and show loading state
      submitButton.disabled = true;
      submitSpinner.classList.remove('hidden');
      submitButtonText.textContent = clientTranslations.submitting;
      formStatus.textContent = '';
      formStatus.classList.remove('text-red-500');

      const formData = new FormData(form);
      const formAction = form.action;
      
      // Don't send the honeypot field
      if (formHoneypot) {
        formData.delete('form-honeypot');
      }

      try {
        const response = await fetch(formAction, {
          method: 'POST',
          body: formData,
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
            Accept: 'application/json',
          },
        });

        if (response.ok) {
          // Reset form and form state
          form.reset();
          formStatus.textContent = '';
          
          // Reset character count
          if (messageCharCount) {
            messageCharCount.textContent = '0';
          }
          
          // Reset the dropdown to placeholder state
          if (reasonSelectedText && reasonHiddenInput) {
            reasonSelectedText.textContent = clientTranslations.reasonPlaceholder;
            reasonSelectedText.classList.add('placeholder-text');
            reasonHiddenInput.value = '';
          }
          
          // Show success modal
          successModal.classList.remove('hidden');
          successModal.classList.add('flex');
          modalConfirmButton.focus();
        } else {
          console.error('Submission failed:', response.status, response.statusText);
          formStatus.textContent = clientTranslations.errorOops;
          formStatus.classList.add('text-red-500');
        }
      } catch (error) {
        console.error('Error:', error);
        formStatus.textContent = clientTranslations.errorNetwork;
        formStatus.classList.add('text-red-500');
      } finally {
        // Reset button state
        submitButton.disabled = false;
        submitSpinner.classList.add('hidden');
        submitButtonText.textContent = clientTranslations.submitButton;
      }
    });

    // Close modal on button click
    modalConfirmButton.addEventListener('click', () => {
      successModal.classList.add('hidden');
      successModal.classList.remove('flex');
      submitButton.focus(); // Return focus to submit button for better accessibility
    });

    // Close modal on Escape key press
    successModal.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        successModal.classList.add('hidden');
        successModal.classList.remove('flex');
        submitButton.focus(); // Return focus to submit button
      }
    });

    // Close modal on click outside
    successModal.addEventListener('click', (e) => {
      if (e.target === successModal) {
        successModal.classList.add('hidden');
        successModal.classList.remove('flex');
        submitButton.disabled = false;
        submitButton.textContent = 'Submit';
      }
    });
  } else {
    console.error('Could not find all required elements for form submission script.');
  }
</script>
