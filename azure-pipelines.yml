trigger:
  branches:
    include:
      - main
      - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: aws-credentials

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '22.x'
    displayName: 'Install Node.js'

  - script: |
      npm install
    displayName: 'Install dependencies'

  - script: |
      npm run build
    displayName: 'Build Astro project'

  - task: CopyFiles@2
    inputs:
      Contents: |
        dist/**
        package.json
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    displayName: 'Copy build files'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
    displayName: 'Publish build artifacts'

  - script: |
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      unzip awscliv2.zip
      sudo ./aws/install
      aws --version
    displayName: 'Install AWS CLI'

  - script: |
      aws configure set aws_access_key_id $(AWS_ACCESS_KEY)
      aws configure set aws_secret_access_key $(AWS_SECRET_KEY)
      aws configure set default.region $(AWS_REGION)

      if [[ "$(Build.SourceBranchName)" == "develop" ]]; then
        aws s3 sync dist/ s3://jinglepay-staging-website --delete
        aws cloudfront create-invalidation --distribution-id $(STAGING_CLOUDFRONT_ID) --paths "/*"
      fi

      if [[ "$(Build.SourceBranchName)" == "main" ]]; then
        aws s3 sync dist/ s3://jinglepay-production-website --delete
        aws cloudfront create-invalidation --distribution-id $(PROD_CLOUDFRONT_ID) --paths "/*"
      fi
    displayName: 'Deploy to AWS'
    condition: succeeded()
